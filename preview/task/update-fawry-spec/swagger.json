{
  "openapi": "3.0.1",
  "info": {
    "title": "Checkout.com API Reference",
    "description": "# Introduction\nCheckout.com provides a collection of APIs that enable you to process and manage payments.  \n\nOur APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors. You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href=\"https://docs.checkout.com/quickstart/integrate/sdks\" target=\"_blank\">SDKs</a>.  \n\nOur unified payments API allows you to accept payments from cards, digital wallets and the most popular alternative payment methods, as well as pay out to a variety of destinations, all using the same integration.\n\nAnd with our webhook management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly.\n# Authentication\nWhen you sign up for an account, you are given a secret and public API key pair. You authenticate with our API by providing the appropriate key in the request Authorization header.\n\nNever share your secret keys. Keep them guarded and secure.\n",
    "termsOfService": "https://checkout.com/terms/",
    "contact": {
      "name": "Checkout.com Support",
      "url": "https://checkout.com",
      "email": "support@checkout.com"
    },
    "license": {
      "name": "Checkout.com",
      "url": "https://checkout.com/api/license/"
    },
    "version": "1.0.0",
    "x-logo": {
      "url": "https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg",
      "backgroundColor": "#E6E7EC",
      "altText": "Checkout.com API logo"
    }
  },
  "servers": [
    {
      "url": "https://api.checkout.com",
      "description": "Live API"
    },
    {
      "url": "https://api.sandbox.checkout.com",
      "description": "Sandbox API"
    }
  ],
  "paths": {
    "/disputes": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get disputes",
        "description": "Returns a list of all disputes against your business. The results will be returned in reverse chronological order, showing the last modified dispute (for example, where you've recently added a piece of evidence) first. You can use the optional parameters below to skip or limit results.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The numbers of results to return",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of results to skip",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The date and time from which to filter disputes, based on the dispute's `last_update` field",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The date and time until which to filter disputes, based on the dispute's `last_update` field",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The unique identifier of the dispute",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "One or more comma-separated statuses. This works like a logical *OR* operator",
            "schema": {
              "type": "string",
              "example": "evidence_required,evidence_under_review"
            }
          },
          {
            "name": "payment_id",
            "in": "query",
            "description": "The unique identifier of the payment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_reference",
            "in": "query",
            "description": "An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_arn",
            "in": "query",
            "description": "The acquirer reference number (ARN) that you can use to query the issuing bank",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "this_channel_only",
            "in": "query",
            "description": "If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disputes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputePaged"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable paging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputes = await cko.disputes.get({\n  limit: 5,\n  id: \"dsp_bc94ebda8d275i461229\",\n});"
          }
        ]
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get dispute details",
        "description": "Returns all the details of a dispute using the dispute identifier.",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst disputeDetails = await cko.disputes.getDetails(\n  \"dsp_bc94ebda8d275i461229\"\n);"
          }
        ]
      }
    },
    "/disputes/{dispute_id}/accept": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Accept dispute",
        "description": "If a dispute is legitimate, you can choose to accept it. This will close it for you and remove it from your list of open disputes. There are no further financial implications.",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dispute accepted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst accept = await cko.disputes.accept(\"dsp_bc94ebda8d275i461229\");"
          }
        ]
      }
    },
    "/disputes/{dispute_id}/evidence": {
      "put": {
        "tags": [
          "Disputes"
        ],
        "summary": "Provide dispute evidence",
        "description": "Adds supporting evidence to a dispute. Before using this endpoint, you first need to [upload your files](#tag/Disputes/paths/~1files/post) using the file uploader. You will receive a file id (prefixed by `file_`) which you can then use in your request.\nNote that this only attaches the evidence to the dispute, it does not send it to us. Once ready, you will need to submit it.\n\n**You must provide at least one evidence type in the body of your request.**\n",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvideEvidenceRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Dispute evidence provided successfully"
          },
          "400": {
            "description": "Unprocessable"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst evidence = await cko.disputes.provideEvidence(\n  \"dsp_bc94ebda8d275i461229\",\n  {\n    proof_of_delivery_or_service_text: \"http://checkout.com/document.pdf\",\n  }\n);"
          }
        ]
      },
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get dispute evidence",
        "description": "Retrieves a list of the evidence submitted in response to a specific dispute. \n",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute evidence retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evidence"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getEvidence = await cko.disputes.getEvidence(\"dsp_bc94ebda8d275i461229\");"
          }
        ]
      },
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Submit dispute evidence",
        "description": "With this final request, you can submit the evidence that you have previously provided. Make sure you have provided all the relevant information before using this request. You will not be able to amend your evidence once you have submitted it.",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "description": "The dispute identifier",
            "required": true,
            "schema": {
              "pattern": "^(dsp)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dispute evidence submitted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dispute not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst submitEvidence = await cko.disputes.submit(\"dsp_bc94ebda8d275i461229\");"
          }
        ]
      }
    },
    "/event-types": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event types",
        "description": "Retrieve a list of event types grouped by their respective version that you can configure on your webhooks.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The API version for which you want to retrieve the event types. Set this to `1.0` for the legacy API or `2.0` for the Unified Payments API. If no version is specified, event types for both versions will be returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event types retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypesObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst events = await cko.events.retrieveEventTypes();"
          }
        ]
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event",
        "description": "Retrieves the event with the specified identifier string. The event `data` includes the full event details, the schema of which will vary based on the `type`.\n",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventObject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst event = await cko.events.retrieveEvent(\"evt_c2qelfixai2u3es3ksovngkx3e\");"
          }
        ]
      }
    },
    "/events/{eventId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve event notification",
        "description": "Retrieves the attempts for a specific event notification",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "The notification identifier",
            "required": true,
            "schema": {
              "pattern": "^(ntf)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or notification not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst notification = await cko.events.retrieveEventNotification({\n  eventId: \"evt_c2qelfixai2u3es3ksovngkx3e\",\n  notificationId: \"ntf_wqjkqpgjy33uxoywcej4fnw6qm\",\n});"
          }
        ]
      }
    },
    "/events/{eventId}/webhooks/{webhookId}/retry": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retry webhook",
        "description": "Retries a specific webhook notification for the given event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "description": "The webhook identifier",
            "required": true,
            "schema": {
              "pattern": "^(wh)_(\\w{32})$",
              "type": "string"
            },
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "responses": {
          "202": {
            "description": "Retry accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst retry = await cko.events.retry({\n  eventId: \"evt_c2qelfixai2u3es3ksovngkx3e\",\n  webhookId: \"wh_mpkyioafmajulnhjvwmrklenb4\",\n});"
          }
        ]
      }
    },
    "/events/{eventId}/webhooks/retry": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retry all webhooks",
        "description": "Retries all webhook notifications configured for the specified event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The event identifier",
            "required": true,
            "schema": {
              "pattern": "^(evt)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Retry accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event or webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst retryAll = await cko.events.retryAll(\"evt_c2qelfixai2u3es3ksovngkx3e\");"
          }
        ]
      }
    },
    "/files": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Upload file",
        "description": "Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG, PNG or PDF format, and be no larger than 4MB.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst file = await cko.files.upload({\n  path: fs.createReadStream(\"./test/files/evidence.jpg\"),\n  purpose: \"dispute_evidence\",\n});"
          }
        ]
      }
    },
    "/files/{file_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get file information",
        "description": "Retrieve information about a file that was previously uploaded.",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The file identifier. It is always prefixed by `file_`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "File not found"
          },
          "429": {
            "description": "Too many requests or duplicate request detected"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst getFile = await cko.files.getFile(\"file_zna32sccqbwevd3ldmejtplbhu\");"
          }
        ]
      }
    },
    "/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Create an instrument",
        "description": "Exchange a single use Checkout.com token for a payment instrument reference, that can be used at any time to request one or more payments.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstrumentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Instrument created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstrumentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\ntry {\n  const instrument = await cko.instruments.create({\n    // infered type \"token\",\n    token: \"tok_bzi43qc6jeee5mmnfo4gnsnera\", // Generated by Checkout.Frames\n  });\n} catch (err) {\n  console.log(err.name);\n}"
          }
        ]
      }
    },
    "/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Request a payment or payout",
        "description": "To accept payments from <a href=\"https://docs.checkout.com/payment-methods/cards\" target=\"blank\">cards</a>, <a href=\"https://docs.checkout.com/payment-methods/wallets\" target=\"blank\">digital wallets</a> and many <a href=\"https://docs.checkout.com/payment-methods/\" target=\"blank\">alternative payment methods</a>, specify the `source.type` field, along with the source-specific data.\n\nTo <a href=\"https://docs.checkout.com/payment-actions/pay-out-to-a-card\" target=\"blank\">pay out to a card</a>, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.\n\nTo verify the success of the payment, check the `approved` field in the response.\n",
        "parameters": [
          {
            "name": "Cko-Idempotency-Key",
            "in": "header",
            "description": "An optional idempotency key for safely retrying payment requests",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentRequest"
                  },
                  {
                    "$ref": "#/components/schemas/Payout"
                  }
                ]
              },
              "example": {
                "source": {
                  "type": "token",
                  "token": "tok_4gzeau5o2uqubbk6fufs3m7p54"
                },
                "amount": 6540,
                "currency": "USD",
                "payment_type": "Recurring",
                "reference": "ORD-5023-4E89",
                "description": "Set of 3 masks",
                "capture": true,
                "capture_on": "2019-09-10T10:11:12.0000000+00:00",
                "customer": {
                  "id": "cus_udst2tfldj6upmye2reztkmm4i",
                  "email": "jokershere@gmail.com",
                  "name": "Jack Napier"
                },
                "billing_descriptor": {
                  "name": "SUPERHEROES.COM",
                  "city": "GOTHAM"
                },
                "shipping": {
                  "address": {
                    "address_line1": "Checkout.com",
                    "address_line2": "90 Tottenham Court Road",
                    "city": "London",
                    "state": "London",
                    "zip": "W1T 4TJ",
                    "country": "GB"
                  },
                  "phone": {
                    "country_code": 1,
                    "number": "415 555 2671"
                  }
                },
                "3ds": {
                  "enabled": true,
                  "attempt_n3d": true,
                  "eci": 5,
                  "cryptogram": "AgAAAAAAAIR8CQrXcIhbQAAAAAA=",
                  "xid": "MDAwMDAwMDAwMDAwMDAwMzIyNzY=",
                  "version": "2.0.1"
                },
                "previous_payment_id": "pay_fun26akvvjjerahhctaq2uzhu4",
                "risk": {
                  "enabled": false
                },
                "success_url": "http://example.com/payments/success",
                "failure_url": "http://example.com/payments/fail",
                "payment_ip": "90.197.169.245",
                "recipient": {
                  "dob": "1985-05-15T00:00:00.0000000+00:00",
                  "account_number": 5555554444,
                  "zip": "W1T",
                  "last_name": "Jones"
                },
                "metadata": {
                  "coupon_code": "NY2018",
                  "partner_id": 123989
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment processed successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                },
                "example": {
                  "id": "pay_mbabizu24mvu3mela5njyhpit4",
                  "action_id": "act_mbabizu24mvu3mela5njyhpit4",
                  "amount": 6540,
                  "currency": "USD",
                  "approved": true,
                  "status": "Authorized",
                  "auth_code": 770687,
                  "response_code": 10000,
                  "response_summary": "Approved",
                  "3ds": {
                    "downgraded": true,
                    "enrolled": "N"
                  },
                  "risk": {
                    "flagged": true
                  },
                  "source": {
                    "type": "card",
                    "id": "src_nwd3m4in3hkuddfpjsaevunhdy",
                    "billing_address": {
                      "address_line1": "Checkout.com",
                      "address_line2": "90 Tottenham Court Road",
                      "city": "London",
                      "state": "London",
                      "zip": "W1T 4TJ",
                      "country": "GB"
                    },
                    "phone": {
                      "country_code": 1,
                      "number": "415 555 2671"
                    },
                    "last4": 4242,
                    "fingerprint": "F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832",
                    "bin": 424242
                  },
                  "customer": {
                    "id": "cus_udst2tfldj6upmye2reztkmm4i",
                    "email": "jokershere@gmail.com",
                    "name": "Jack Napier"
                  },
                  "processed_on": "2019-09-10T10:11:12.0000000+00:00",
                  "reference": "ORD-5023-4E89",
                  "processing": {
                    "retrieval_reference_number": 909913440644,
                    "acquirer_transaction_id": 4.406443090994999E+20
                  },
                  "eci": 6,
                  "scheme_id": 489341065491658,
                  "links": {
                    "self": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                    },
                    "action": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions"
                    },
                    "void": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures"
                    },
                    "capture": {
                      "href": "https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Payment asynchronous or further action required",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests or duplicate request detected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n    Reference = \"ORD-090857\",\n    Capture = false,\n    ThreeDs = true\n};\n\ntry\n{\n    var response = await api.Payments.RequestAsync(paymentRequest);\n\n    if (response.IsPending && response.Pending.RequiresRedirect())\n    {\n        return Redirect(response.Pending.GetRedirectLink().Href);\n    }\n\n    if (response.Payment.Approved)\n        return PaymentSucessful(response.Payment);\n\n    return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n    return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n    Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n    throw;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nTokenSource tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nPaymentRequest<TokenSource> paymentRequest = PaymentRequest.fromSource(tokenSource, Currency.USD, 5600);\npaymentRequest.setReference(\"ORD-090857\");\npaymentRequest.setCapture(false);\npaymentRequest.setThreeDS(ThreeDSRequest.from(true));\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestAsync(paymentRequest).get();\n\n    if (response.isPending() && response.getPending().requiresRedirect()) {\n        return redirect(response.getPending().getRedirectLink().getHref());\n    }\n\n    if (response.getPayment().isApproved())\n        return paymentSucessful(response.getPayment());\n\n    return paymentDeclined(response.getPayment());\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n    const payment = await cko.payments.request({\n        source: {\n            // infered type: \"token\"\n            token: 'tok_bzi43qc6jeee5mmnfo4gnsnera' // Generated by Checkout.Frames\n            billing_address: {\n                address_line1: 'Wall Street',\n                address_line2: 'Dollar Avenue',\n                city: 'London',\n                state: 'London',\n                zip: 'W1W W1W',\n                country: 'GB'\n            },\n            phone: {\n                country_code: '44',\n                number: '7123456789'\n            }\n        },\n        currency: 'USD',\n        amount: 1000,\n        payment_type: 'Regular',\n        reference: 'ORDER 1234',\n        description: 'Mint Tea',\n        customer: {\n            email: 'new_user@email.com',\n            name: 'John Smith'\n        },\n        metadata: {\n            myCustomProp: {\n                value: 1\n            }\n        }\n    });\n\n} catch (err) {\n    console.log(err.name)\n}"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    payment = api.payments.request(\n        source={\n            'token': 'tok_...',\n        },\n        amount=100,\n        currency=sdk.Currency.USD,\n        reference='pay_ref'\n    )\n    print(payment.id)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment details",
        "description": "Returns the details of the payment with the specified identifier string.\n\nIf the payment method requires a redirection to a third party (e.g., 3D Secure),\nthe redirect URL back to your site will include a `cko-session-id` query parameter\ncontaining a payment session ID that can be used to obtain the details of the payment, for example:\n\nhttp://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment or payment session identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay|sid)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = await api.Payments.GetAsync(sessionId);\n\nif (payment.Approved)\n{            \n    var cardSourceId = payment.Source.AsCard().Id;\n}"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = api.paymentsClient().getAsync(sessionId).get();\n\nif (payment.isApproved()) {\n    String cardSourceId = ((CardSourceResponse)payment.getSource()).getId();\n}"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.get(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n\t$details = $checkout->payments()->details($threeDsSessionId);\n\treturn $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n\treturn $ex->getErrors();\n}"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    payment = api.payments.get('pay_...')\n    print(payment.id)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/actions": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get payment actions",
        "description": "Returns all the actions associated with a payment ordered by processing date in descending order (latest first).\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment actions retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentActionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nIEnumerable<PaymentAction> paymentActions = await api.Payments.GetActionsAsync(paymentId);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nList<PaymentAction> paymentActions = api.paymentsClient().getActionsAsync(paymentId).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.getActions(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\");"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    actions = api.payments.get_actions('pay_...')\n    for action in actions:\n        print(action.id)\n        print(action.type)\n        print(action.response_code)\n        print(action.reference)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/captures": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Capture a payment",
        "description": "Captures a payment if supported by the payment method.\n\nFor card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptureRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Capture accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptureAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Capture not allowed"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\nawait api.Payments.CaptureAsync(paymentId);\n\n// Or partial capture\nvar captureRequest = new CaptureRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.CaptureAsync(paymentId, captureRequest);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\napi.paymentsClient().captureAsync(paymentId).get();\n\n// Or partial capture\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().captureAsync(paymentId, captureRequest).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n    amount: 1000,\n    reference: 'CAPTURE ORDER 1234',\n    metadata: {\n        value: 'my value'\n    }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.capture('pay_...', amount=100, reference='CAPTURE')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/refunds": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Refund a payment",
        "description": "Refunds a payment if supported by the payment method.\n\nFor card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Refund accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Refund not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\nawait api.Payments.RefundAsync(paymentId);\n\n// Or partial refund\nvar refundRequest = new RefundRequest\n{\n    Reference = \"your reference\",\n    Amount = 100\n};\n\nawait api.Payments.RefundAsync(paymentId, refundRequest);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\napi.paymentsClient().refundAsync(paymentId).get();\n\n// Or partial refund\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().refundAsync(paymentId, refundRequest).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.refund(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"REFUND ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.refund('pay_...', amount=100, reference='REFUND')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/payments/{id}/voids": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Void a payment",
        "description": "Voids a payment if supported by the payment method.\n\nFor card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The payment identifier",
            "required": true,
            "schema": {
              "pattern": "^(pay)_(\\w{26})$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoidRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Void accepted",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoidAcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "403": {
            "description": "Void not allowed"
          },
          "404": {
            "description": "Payment not found"
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nawait api.Payments.VoidAsync(paymentId);"
          },
          {
            "lang": "Java",
            "source": "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\napi.paymentsClient().voidAsync(paymentId).get();"
          },
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst payment = await cko.payments.void(\"pay_je5hbbb4u3oe7k4u3lbwlu3zkq\", {\n  amount: 1000,\n  reference: \"VOID ORDER 1234\",\n  metadata: {\n    value: \"my value\"\n  }\n});"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
          },
          {
            "lang": "Python",
            "source": "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.void('pay_...', reference='VOID')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
          }
        ]
      }
    },
    "/reporting/payments": {
      "get": {
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get JSON payments report",
        "description": "Returns a JSON report containing all payments within your specified parameters. You can reconcile the data from this report against your statements (which can be found in the <a href=\"https://hub.checkout.com/login\" target=\"_blank\">Hub</a>), the list of payments in the Hub (using the `Reference` field) or your own systems. *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Date and time from which to search for payments",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Date and time until which to search for payments",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Reference of a specific payment to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Sets a limit on the number of results",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payments report retrieved successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      },
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ]
    },
    "/reporting/payments/{paymentId}": {
      "get": {
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get JSON single payment report",
        "description": "Returns a JSON payment report containing all of the data related to a specific payment, based on the payment's identifier. *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The unique payment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment report returned successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      },
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ]
    },
    "/reporting/payments/download": {
      "get": {
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get CSV payments report",
        "description": "In addition to the JSON format returned by the `reporting/payments` endpoint, you can also download a CSV report containing the same data. Learn more about <a href=\"https://docs.checkout.com/reporting-and-insights/reconciliation-api/payments-endpoint#Paymentsendpoint-HowtoreadtheCSVfile\" target=\"_blank\">how to read your CSV report</a>.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Date and time from which to search for payments",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Date and time until which to search for payments",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": { }
      },
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ]
    },
    "/reporting/statements": {
      "get": {
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get JSON statements report",
        "description": "Returns a JSON report containing all statements within your specified parameters. Please note that the timezone for the request will be UTC.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Date and time from which to search for statements",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Date and time until which to search for statements",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Statements report successfully retrieved",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementsReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        }
      },
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ]
    },
    "/reporting/statements/{statementId}/payments/download": {
      "get": {
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get CSV single statement report",
        "description": "Downloads a CSV statement report containing all of the data related to a specific statement, based on the statement's identifier.",
        "parameters": [
          {
            "name": "StatementId",
            "in": "path",
            "description": "The unique statement identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "190110B107654"
          }
        ],
        "responses": { }
      },
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ]
    },
    "/reporting/statements/download": {
      "get": {
        "tags": [
          "Reconciliation"
        ],
        "summary": "Get CSV statements report",
        "description": "In addition to the JSON format returned by the `reporting/statements` endpoint, you can also download a CSV report containing the same data.",
        "responses": { }
      },
      "servers": [
        {
          "url": "https://api.checkout.com",
          "description": "Live API"
        }
      ]
    },
    "/sources": {
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Add a payment source",
        "description": "Add a reusable payment source, like a <a href=\"https://docs.checkout.com/payment-methods/direct-debit/sepa-direct-debit\" target=\"blank\">SEPA Direct Debit</a>, that you can later use to make one or more payments.\nPayment sources are linked to a specific customer and cannot be shared between customers.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment source added successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSourceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n    const payment = await cko.sources.add({\n        // infered type: \"sepa\"\n        source: {\n            token: 'tok_bzi43qc6jeee5mmnfo4gnsnera' // Generated by Checkout.Frames\n            billing_address: {\n                address_line1: 'Wall Street',\n                address_line2: 'Dollar Avenue',\n                city: 'London',\n                state: 'London',\n                zip: 'W1W W1W',\n                country: 'GB'\n            },\n            phone: {\n                country_code: '44',\n                number: '7123456789'\n            }\n        },\n        currency: 'USD',\n        amount: 1000,\n        payment_type: 'Regular',\n        reference: 'ORDER 1234',\n        description: 'Mint Tea',\n        customer: {\n            email: 'new_user@email.com',\n            name: 'John Smith'\n        },\n        metadata: {\n            myCustomProp: {\n                value: 1\n            }\n        }\n    });\n\n} catch (err) {\n    console.log(err.name)\n}"
          }
        ]
      }
    },
    "/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Request a token",
        "description": "Exchange a digital wallet payment token or card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes. \nTo create a token, please authenticate using your public key. \n\n**Please note:** You should only use the `card` type for testing purposes.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reference token created successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\", { pk: \"pk_YYYY\" });\n\ntry {\n  const token = await cko.tokens.request({\n    // infered type: \"applepay\"\n    token_data: {\n      version: \"EC_v1\",\n      data: \"t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...\",\n      signature: \"MIAGCSqGbGUg...\",\n      header: {\n        ephemeralPublicKey: \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...\",\n        transactionId: \"3cee89679130a4b...\",\n      },\n    },\n  });\n} catch (err) {\n  console.log(err.name);\n}"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhooks",
        "description": "Retrieves the webhooks configured for the channel identified by your API key\n",
        "responses": {
          "200": {
            "description": "Configured webhooks",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No webhooks configured"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst webhooks = await cko.webhooks.retrieveWebhooks();"
          }
        ]
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Register webhook",
        "description": "Register a new webhook endpoint that Checkout.com will post all or selected events to\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook registered successfully",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "URL already registered for another webhook"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst webhook = await cko.webhooks.registerWebhook({\n  url: \"https://example.com/webhook\",\n  active: true,\n  headers: {\n    authorization: \"1234\",\n  },\n  content_type: \"json\",\n  event_types: [\"payment_approved\", \"payment_captured\"],\n});"
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve webhook",
        "description": "Retrieves the webhook with the specified identifier string\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier\n",
            "required": true,
            "schema": {
              "pattern": "^(wh)_(\\w{32})$",
              "type": "string"
            },
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "url"
                  ],
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/WebhookRequest"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst webhook = await cko.webhooks.retrieveWebhook(\n  \"wh_tdt72zlbe7cudogxdgit6nwk6i\"\n);"
          }
        ]
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhook",
        "description": "Updates an existing webhook\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier\n",
            "required": true,
            "schema": {
              "pattern": "^(wh)_(\\w{32})$",
              "type": "string"
            },
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          },
          "409": {
            "description": "URL already registered for another webhook"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst webhook = await cko.webhooks.updateWebhook(\n  \"wh_ahun3lg7bf4e3lohbhni65335u\",\n  {\n    url: \"https://example.com/webhooks/updated\",\n    active: true,\n    headers: {\n      authorization: \"1234\",\n    },\n    content_type: \"json\",\n    event_types: [\"payment_approved\", \"payment_captured\"],\n  }\n);"
          }
        ]
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Partially update webhook",
        "description": "Updates all or some of the registered webhook details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier\n",
            "required": true,
            "schema": {
              "pattern": "^(wh)_(\\w{32})$",
              "type": "string"
            },
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated webhook",
            "headers": {
              "Cko-Request-Id": {
                "$ref": "#/components/headers/Cko-Request-Id"
              },
              "Cko-Version": {
                "$ref": "#/components/headers/Cko-Version"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Invalid data was sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          },
          "409": {
            "description": "URL already exists in another webhook configuration"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst webhook = await cko.webhooks.partiallyUpdateWebhook(\n  \"wh_ahun3lg7bf4e3lohbhni65335u\",\n  {\n    url: \"https://example.com/webhooks/updated\",\n  }\n);"
          }
        ]
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Remove webhook",
        "description": "Removes an existing webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The webhook identifier\n",
            "required": true,
            "schema": {
              "pattern": "^(wh)_(\\w{32})$",
              "type": "string"
            },
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook removed successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "x-code-samples": [
          {
            "lang": "Node (Beta)",
            "source": "import { Checkout } from \"checkout-node-sdk\";\n\nconst cko = new Checkout(\"sk_XXXX\");\n\nconst webhook = await cko.webhooks.removeWebhook(\n  \"wh_ahun3lg7bf4e3lohbhni65335u\"\n);"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "01_SepaAddress": {
        "required": [
          "address_line1",
          "city",
          "zip",
          "country"
        ],
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "Brandenburger Tor"
          },
          "address_line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "Pariser Platz"
          },
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "Berlin"
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "Berlin"
          },
          "zip": {
            "type": "string",
            "description": "The address zip/postal code",
            "example": "10117"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">ISO country code</a> of the address",
            "example": "DE"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "The first line of the address",
            "example": "Checkout.com"
          },
          "address_line2": {
            "type": "string",
            "description": "The second line of the address",
            "example": "90 Tottenham Court Road"
          },
          "city": {
            "type": "string",
            "description": "The address city",
            "example": "London"
          },
          "state": {
            "type": "string",
            "description": "The address state",
            "example": "London"
          },
          "zip": {
            "type": "string",
            "description": "The address zip/postal code",
            "example": "W1T 4TJ"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The two-letter <a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">ISO country code</a> of the address",
            "example": "GB"
          }
        }
      },
      "Batch": {
        "required": [
          "id",
          "status",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^bat_(\\w{26})$",
            "type": "string",
            "description": "Batch identifier",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The status of the batch",
            "example": "Processing"
          },
          "_links": {
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "SubmitBatchRequest": {
        "required": [
          "file_id",
          "action"
        ],
        "type": "object",
        "properties": {
          "file_id": {
            "pattern": "^file_(\\w{26})$",
            "type": "string",
            "description": "The identifier of the batch file previously uploaded via the [Files API](#tag/Files)",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "action": {
            "enum": [
              "payment"
            ],
            "type": "string",
            "description": "The action to be performed against the batch",
            "example": "payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the batch. If provided, this will be validated against the batch file's header",
            "example": "payments-20180701"
          }
        },
        "description": "The batch request"
      },
      "SubmitBatchResponse": {
        "required": [
          "id",
          "status",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^bat_(\\w{26})$",
            "type": "string",
            "description": "Batch identifier",
            "example": "bat_cyukd74c4xoezfuarvuwdcpzou"
          },
          "status": {
            "type": "string",
            "description": "The batch status",
            "example": "Processing"
          },
          "_links": {
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the batch",
                "example": {
                  "href": "https://api.checkout.com/batches/bat_fa72f568492b4d3eb6d81e0645e320f6"
                }
              }
            }
          }
        }
      },
      "Dispute": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(dsp)_(\\w{22})$",
            "type": "string",
            "description": "The dispute identifier. This is the same as the payment action ID",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "category": {
            "enum": [
              "fraudulent",
              "unrecognized",
              "canceled_recurring",
              "product_service_not_received",
              "not_as_described",
              "credit_not_issued",
              "duplicate",
              "incorrect_amount",
              "general"
            ],
            "type": "string",
            "description": "The reason for the dispute. [Find out more](https://docs.checkout.com/risk-management/disputes#Disputes-Disputereasonsandrecommendedevidence)",
            "example": "fraudulent"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The processing currency",
            "example": "GBP"
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code provided by the card scheme",
            "example": "C42"
          },
          "status": {
            "enum": [
              "evidence_required",
              "evidence_under_review",
              "resolved",
              "won",
              "lost",
              "canceled",
              "expired",
              "accepted"
            ],
            "type": "string",
            "description": "The current status of the dispute",
            "example": "evidence_required"
          },
          "relevant_evidence": {
            "type": "array",
            "items": {
              "enum": [
                "proof_of_delivery_or_service",
                "invoice_or_receipt",
                "invoice_showing_distinct_transactions",
                "customer_communication",
                "refund_or_cancellation_policy",
                "proof_of_delivery_or_service_date",
                "recurring_transaction_agreement",
                "additional_evidence"
              ],
              "type": "strings",
              "example": "proof_of_delivery_or_service"
            }
          },
          "evidence_required_by": {
            "type": "string",
            "description": "The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer",
            "format": "ISO-8601",
            "example": "2018-08-21T00:00:00Z"
          },
          "received_on": {
            "type": "string",
            "description": "The date and time at which the dispute was issued",
            "format": "ISO-8601",
            "example": "2018-08-01T04:00:10Z"
          },
          "last_update": {
            "type": "string",
            "description": "The date and time at which the dispute was last updated",
            "format": "ISO-8601",
            "example": "2018-08-04T10:53:13Z"
          },
          "payment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment identifier",
                "example": "pay_88cb4e671m1da22e9bbbyx"
              },
              "amount": {
                "type": "number",
                "description": "The amount that is being disputed, in the processing currency",
                "example": 999
              },
              "currency": {
                "type": "string",
                "description": "The payment currency",
                "example": "GBP"
              },
              "method": {
                "type": "string",
                "description": "The payment method used",
                "example": "Visa"
              },
              "arn": {
                "type": "string",
                "description": "The acquirer reference number (ARN)",
                "example": "AA246873253573571073808"
              },
              "processed_on": {
                "type": "string",
                "description": "The date and time at which the payment was requested",
                "format": "ISO-8601",
                "example": "2018-08-01T08:18:10Z"
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
                  }
                },
                "description": "The dispute retrieval endpoint"
              },
              "evidence": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf/evidence"
                  }
                },
                "description": "The dispute evidence retrieval endopint"
              }
            }
          }
        }
      },
      "DisputePaged": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "The numbers of items to return",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The number of results to skip",
            "example": 10
          },
          "from": {
            "type": "string",
            "description": "The date and time from which to filter disputes, based on the dispute's `last_update` field",
            "format": "ISO-8601",
            "example": "2018-08-12T01:15:56Z"
          },
          "to": {
            "type": "string",
            "description": "The date and time until which to filter disputes, based on the dispute's `last_update` field",
            "format": "ISO-8601",
            "example": "2018-08-13T11:09:01Z"
          },
          "statuses": {
            "type": "string",
            "description": "One or more comma-separated statuses. This works like a logical *OR* operator",
            "example": "evidence_required,evidence_under_review"
          },
          "id": {
            "pattern": "^(dsp)_(\\w{22})$",
            "type": "string",
            "description": "The unique identifier of the dispute",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "payment_id": {
            "pattern": "^(pay)_(\\w{26})$",
            "type": "string",
            "description": "The unique identifier of the payment",
            "example": "pay_88cb4e671m1da22e9bbbyx"
          },
          "payment_reference": {
            "type": "string",
            "description": "An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`",
            "example": "th7zxa1kcnqmes8"
          },
          "payment_arn": {
            "type": "string",
            "description": "The acquirer reference number (ARN) that you can use to query the issuing bank",
            "example": "74548998294293193445538"
          },
          "this_channel_only": {
            "type": "boolean",
            "description": "If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business",
            "example": true
          },
          "total_count": {
            "type": "integer",
            "description": "The total number of disputes retrieved (without taking into consideration skip and limit parameters)",
            "example": 1
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeSummary"
            },
            "description": "The list of disputes"
          }
        }
      },
      "DisputeSummary": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(dsp)_(\\w{22})$",
            "type": "string",
            "description": "The dispute identifier. This is the same as the action ID in the reconciliation API or the charge ID in the Hub.",
            "example": "dsp_rbhwd2qrg13uhrp2newf"
          },
          "category": {
            "enum": [
              "fraudulent",
              "unrecognized",
              "canceled_recurring",
              "product_service_not_received",
              "not_as_described",
              "credit_not_issued",
              "duplicate",
              "incorrect_amount",
              "general"
            ],
            "type": "string",
            "description": "The reason for the dispute. [Find out more](https://docs.checkout.com/docs/disputes#section-dispute-reasons-and-recommended-evidence)",
            "example": "fraudulent"
          },
          "status": {
            "enum": [
              "received",
              "evidence_required",
              "evidence_under_review",
              "resolved",
              "closed",
              "won",
              "lost",
              "canceled",
              "accepted"
            ],
            "type": "string",
            "description": "The current status of the dispute",
            "example": "evidence_required"
          },
          "amount": {
            "type": "number",
            "description": "The amount that is being disputed, in the processing currency",
            "example": 999
          },
          "currency": {
            "type": "string",
            "description": "The currency the payment was made in",
            "example": "GBP"
          },
          "payment_id": {
            "type": "string",
            "description": "The unique payment identifier",
            "example": "pay_88cb4e671m1da22e9bbbyx"
          },
          "payment_reference": {
            "type": "string",
            "description": "An optional reference (such as an order ID) a merchant can use to later identify the charge. Previously known as TrackId",
            "example": "th7zxa1kcnqmes8"
          },
          "payment_arn": {
            "type": "string",
            "description": "The acquirer reference number that can be used to query the issuing bank",
            "example": "74548998294293193445538"
          },
          "payment_method": {
            "type": "string",
            "description": "The payment method/card scheme",
            "example": "VISA"
          },
          "evidence_required_by": {
            "type": "string",
            "description": "The deadline by which to respond to the dispute. This corresponds to `received_on` + `n`, where `n` is a number of calendar days set by the scheme/acquirer",
            "format": "ISO-8601",
            "example": "2018-08-22T00:00:00Z"
          },
          "received_on": {
            "type": "string",
            "description": "The date and time at which the dispute was issued",
            "format": "ISO-8601",
            "example": "2018-08-01T01:15:56Z"
          },
          "last_update": {
            "type": "string",
            "description": "The date and time at which the dispute was last updated",
            "format": "ISO-8601",
            "example": "2018-08-12T04:15:56Z"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/disputes/dsp_rbhwd2qrg13uhrp2newf"
                  }
                },
                "description": "The dispute retrieval endpoint"
              }
            }
          }
        }
      },
      "Evidence": {
        "type": "object",
        "properties": {
          "proof_of_delivery_or_service_file": {
            "type": "string",
            "description": "The file ID of the file you uploaded as a proof of delivery or service",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_text": {
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Delivery slip signed by the customer"
          },
          "proof_of_delivery_or_service_date_text": {
            "type": "string",
            "description": "The date on which the item was delivered. You can also use this field to provide a link",
            "example": "Merchandise was delivered on 2018-12-30"
          }
        }
      },
      "File": {
        "required": [
          "file",
          "purpose"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The path of the file to upload and its type",
            "example": "file=@/path/receipt.png;type=image/png"
          },
          "purpose": {
            "type": "string",
            "description": "The purpose of the file upload. You must set this to `dispute_evidence`",
            "example": "dispute_evidence"
          }
        }
      },
      "FilePurpose": {
        "enum": [
          "dispute_evidence"
        ],
        "type": "string",
        "description": "The list of file upload purposes. Currently this is only `dispute_evidence`",
        "example": "dispute_evidence"
      },
      "FileResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "filename": {
            "type": "string",
            "description": "The filename, including its extension",
            "example": "receipt.jpg"
          },
          "purpose": {
            "$ref": "#/components/schemas/FilePurpose"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file upload object (in bytes)",
            "example": 1024
          },
          "uploaded_on": {
            "type": "string",
            "description": "The date and time file was uploaded (in UTC)",
            "format": "ISO-8601",
            "example": "2019-05-17T16:48:52Z"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
                  }
                },
                "description": "The file information retrieval URL"
              },
              "download": {
                "properties": {
                  "href": {
                    "example": "https://cabinet-upload-prod.s3.eu-west-1.amazonaws.com/ucdac/ucdac/6lbss42ezvoufcb2beo76rvwly?X-Amz-Expires=3600&x-amz-security-token=FQoDYXdzENL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEa"
                  }
                },
                "description": "The temporary file download URL. This expires after 60 minutes"
              }
            }
          }
        },
        "description": "File was retrieved successfully"
      },
      "FileUploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The file identifier",
            "example": "file_6lbss42ezvoufcb2beo76rvwly"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "properties": {
                  "href": {
                    "example": "https://api.checkout.com/files/file_6lbss42ezvoufcb2beo76rvwly"
                  }
                },
                "description": "The file information retrieval URL"
              }
            }
          }
        },
        "description": "File uploaded successfully"
      },
      "ProvideEvidenceRequest": {
        "type": "object",
        "properties": {
          "proof_of_delivery_or_service_file": {
            "type": "string",
            "description": "A file containing proof of delivery of goods or services",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "http://checkout.com/document.pdf"
          },
          "invoice_or_receipt_file": {
            "type": "string",
            "description": "A file containing an invoice/receipt",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "invoice_or_receipt_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the invoice"
          },
          "invoice_showing_distinct_transactions_file": {
            "type": "string",
            "description": "A file containing invoice showing two distinct transactions",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "invoice_showing_distinct_transactions_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of invoice #1244 showing two transactions"
          },
          "customer_communication_file": {
            "type": "string",
            "description": "A file containing customer cummunication",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "customer_communication_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of an email exchange with the cardholder"
          },
          "refund_or_cancellation_policy_file": {
            "type": "string",
            "description": "A file containing refund/cancellation policy",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "refund_or_cancellation_policy_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the refund policy"
          },
          "recurring_transaction_agreement_file": {
            "type": "string",
            "description": "A file containing the recurring transaction agreement",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "recurring_transaction_agreement_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the recurring transaction agreement"
          },
          "additional_evidence_file": {
            "type": "string",
            "description": "A file containing additional supporting documents",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "additional_evidence_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Scanned document"
          },
          "proof_of_delivery_or_service_date_file": {
            "type": "string",
            "description": "A file showing the delivery date of the provided service/merchandise",
            "example": "file_jmbfgkjromvcrn9t4qu4"
          },
          "proof_of_delivery_or_service_date_text": {
            "maximum": 500,
            "type": "string",
            "description": "A brief text description of the file. You can also use this field to provide a link",
            "example": "Copy of the customer receipt showing the merchandise was delivered on 2018-12-20"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_malformed"
          }
        }
      },
      "BillingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "372 Weimann Lane"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "ew1 7zb"
          },
          "country": {
            "type": "string",
            "example": "SJ"
          },
          "city": {
            "type": "string",
            "example": "North Benedicthaven"
          },
          "state": {
            "type": "string",
            "example": "Georgia"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "example": "cust_7508EA38E86A4569AF12E483519E332D"
          },
          "expiry_month": {
            "type": "string",
            "example": "06"
          },
          "expiry_year": {
            "type": "string",
            "example": "2018"
          },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "id": {
            "type": "string",
            "example": "card_D44D7F4CCC6348698717CD80072808B0"
          },
          "last4": {
            "type": "string",
            "example": "424242******4242"
          },
          "payment_method": {
            "type": "string",
            "example": "VISA"
          },
          "fingerprint": {
            "type": "string",
            "example": "f639cab2745bee4140bf86df6b6d6e255c5945aac3788d923fa047ea4c208622"
          },
          "name": {
            "type": "string",
            "example": "Test Customer"
          },
          "cvv_check": {
            "type": "string",
            "example": "Y"
          },
          "avs_check": {
            "type": "string",
            "example": "S"
          }
        }
      },
      "CustomerPaymentPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "customer_plan_id": {
            "type": "string"
          },
          "card_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plan_track_id": {
            "type": "string"
          },
          "auto_cap_time": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "cycle": {
            "type": "string"
          },
          "recurring_count": {
            "type": "integer"
          },
          "recurring_count_left": {
            "type": "integer"
          },
          "total_collected_value": {
            "type": "integer"
          },
          "total_collected_count": {
            "type": "integer"
          },
          "current_recurring_status": {
            "type": "integer"
          },
          "start_date": {
            "type": "string"
          },
          "previous_recurring_date": {
            "type": "string"
          },
          "next_recurring_date": {
            "type": "string"
          }
        }
      },
      "Data": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The payment unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The currency in which the payment was made (<a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">three-letter ISO code</a>)",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment request was approved",
            "example": true
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code, if the payment was authorized.",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the payment was flagged by a risk check",
            "default": false,
            "example": true
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ],
            "description": "The customer to which this payment is linked"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        },
        "description": "The event data"
      },
      "EventId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The unique event identifier",
        "example": "evt_az5sblvku4ge3dwpztvyizgcau"
      },
      "EventLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "The URI of the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau"
            }
          },
          "webhooks-retry": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Link"
              }
            ],
            "description": "A link to retry all of the webhooks configured for the event",
            "example": {
              "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/retry"
            }
          }
        },
        "description": "The links related to the event"
      },
      "EventObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventId"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "version": {
            "type": "string",
            "description": "Determines the version of the event sent",
            "example": "2.0"
          },
          "created_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the event occurred"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationSummary"
            },
            "description": "The notifications (e.g., webhooks) that have been sent for the event"
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventResult": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "The total number of events",
            "example": 100
          },
          "limit": {
            "type": "integer",
            "description": "The `limit` query parameter",
            "example": 10
          },
          "skip": {
            "type": "integer",
            "description": "The `skip` query parameter",
            "example": 10
          },
          "from": {
            "type": "string",
            "description": "The `from` query parameter",
            "format": "date-time",
            "example": "2018-01-01T00:00:00.0000000+00:00"
          },
          "to": {
            "type": "string",
            "description": "The `to` query parameter",
            "format": "date-time",
            "example": "2018-01-15T12:00:00.0000000+00:00"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSummary"
            }
          }
        }
      },
      "EventSummary": {
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 30,
            "minLength": 30,
            "type": "string",
            "description": "The event identifier",
            "example": "evt_az5sblvku4ge3dwpztvyizgcau"
          },
          "type": {
            "type": "string",
            "description": "The event type",
            "example": "payment_approved"
          },
          "created_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the event occurred"
          },
          "_links": {
            "$ref": "#/components/schemas/EventLinks"
          }
        }
      },
      "EventTypesObject": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "2.0"
          },
          "event_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "card_verification_declined",
              "card_verified",
              "dispute_canceled",
              "dispute_evidence_required",
              "dispute_expired",
              "dispute_lost",
              "dispute_resolved",
              "dispute_won",
              "payment_approved",
              "payment_risk_matched",
              "payment_pending",
              "payment_declined",
              "payment_expired",
              "payment_canceled",
              "payment_voided",
              "payment_void_declined",
              "payment_captured",
              "payment_capture_declined",
              "payment_capture_pending",
              "payment_refunded",
              "payment_refund_declined",
              "payment_refund_pending",
              "payment_chargeback",
              "payment_retrieval"
            ]
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the data sent to the endpoint",
            "example": "json"
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationAttempt"
            },
            "description": "The notification events ordered by timestamp in descending order (latest first)"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the notification",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              },
              "retry": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to retry the notification to the configured webhook",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/webhooks/wh_5nuzkt62ddxuho5rwsvt6pyesi/retry"
                }
              }
            },
            "description": "The links related to the notification"
          }
        }
      },
      "NotificationAttempt": {
        "type": "object",
        "properties": {
          "status_code": {
            "type": "integer",
            "description": "The HTTP status code returned from the target server",
            "example": 400
          },
          "response_body": {
            "type": "string",
            "description": "The response body returned from the target server",
            "example": "Bad Request"
          },
          "retry_mode": {
            "enum": [
              "Automatic",
              "Manual"
            ],
            "type": "string",
            "description": "Whether the notification was sent automatically or requested manually"
          },
          "timestamp": {
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the attempt was made"
          }
        }
      },
      "NotificationId": {
        "maxLength": 30,
        "minLength": 30,
        "type": "string",
        "description": "The unique notification identifier",
        "example": "ntf_az5sblvku4ge3dwpztvyizgcau"
      },
      "NotificationSummary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "url": {
            "type": "string",
            "description": "The notification endpoint",
            "example": "https://example.com/webhooks"
          },
          "success": {
            "type": "boolean",
            "description": "Whether the notification eventually succeeded",
            "example": false
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string",
                "example": {
                  "href": "https://api.checkout.com/events/evt_az5sblvku4ge3dwpztvyizgcau/notifications/ntf_az5sblvku4ge3dwpztvyizgcau"
                }
              }
            },
            "description": "The links related to the notification"
          }
        }
      },
      "Phone": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "975"
          },
          "number": {
            "type": "string",
            "example": "174217187"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tablet 1 gold limited"
          },
          "description": {
            "type": "string",
            "example": "Nokia Lumia"
          },
          "sku": {
            "type": "string",
            "example": "1aab2aa"
          },
          "price": {
            "type": "integer",
            "example": 100
          },
          "quantity": {
            "type": "integer",
            "example": 1
          },
          "image": {
            "type": "string",
            "example": "http://www.test_Jabari.com/"
          },
          "shipping_cost": {
            "type": "integer",
            "example": 10
          },
          "tracking_url": {
            "type": "string",
            "example": "https://www.tracker.com"
          }
        }
      },
      "ShippingDetails": {
        "type": "object",
        "properties": {
          "address_line_1": {
            "type": "string",
            "example": "333 Cormier Bypass"
          },
          "address_line_2": {
            "type": "string",
            "example": "Rolfson Alley"
          },
          "post_code": {
            "type": "string",
            "example": "BR3 6TK"
          },
          "country": {
            "type": "string",
            "example": "GB"
          },
          "city": {
            "type": "string",
            "example": "Bromley"
          },
          "state": {
            "type": "string",
            "example": "Greater London"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        }
      },
      "InstrumentRequest": {
        "required": [
          "type",
          "token"
        ],
        "type": "object",
        "properties": {
          "type": {
            "pattern": "token",
            "type": "string",
            "description": "The instrument type",
            "example": "token"
          },
          "token": {
            "pattern": "^(tok)_(\\w{26})$ | ^(card_tok)_(\\w{12})$",
            "type": "string",
            "description": "The Checkout.com token",
            "example": "tok_asoto22g2fsu7prwomy12sgfsa"
          }
        }
      },
      "InstrumentResponse": {
        "required": [
          "id",
          "type",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source or destination that can be used later for payments",
            "example": "src_wmlfc3zyhqzehihu7giusaaawu"
          },
          "type": {
            "type": "string",
            "description": "The underlying instrument type (for instruments created from Checkout.com tokens, this will reflect the type of instrument that was tokenized)",
            "example": "card"
          },
          "expiry_month": {
            "minimum": 1,
            "maxLength": 2,
            "type": "integer",
            "description": "The expiry month",
            "example": 6
          },
          "expiry_year": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "The expiry year",
            "example": 2025
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996"
          },
          "bin": {
            "type": "string",
            "description": "The card issuer's bank identification number (BIN)",
            "example": "454347"
          },
          "card_type": {
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge"
            ],
            "type": "string",
            "description": "The card type",
            "example": "Credit"
          },
          "card_category": {
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "type": "string",
            "description": "The card category",
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The card issuer's country (<a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">two-letter ISO code</a>)",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          }
        }
      },
      "InvalidError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "IPAddress": {
        "type": "string",
        "format": "ipv4",
        "example": "90.197.169.245"
      },
      "Link": {
        "required": [
          "href"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The link URL"
          }
        }
      },
      "SelfLink": {
        "required": [
          "rel"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          }
        ],
        "properties": {
          "rel": {
            "enum": [
              "self"
            ],
            "type": "string",
            "description": "The link type"
          }
        }
      },
      "PagingError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "paging_limit_invalid"
            }
          }
        }
      },
      "3dsData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Inidicates whether this was a 3D Secure payment downgraded to non-3D Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          },
          "signature_valid": {
            "type": "string",
            "description": "Verification to ensure the integrity of the response",
            "example": "Y"
          },
          "authentication_response": {
            "type": "string",
            "description": "Indicates whether or not the cardholder was authenticated\n  * `Y` - Customer authenticated\n  * `N` - Customer not authenticated\n  * `A` - An authentication attempt occurred but could not be completed\n  * `U` - Unable to perform authentication\n",
            "example": "Y"
          },
          "cryptogram": {
            "type": "string",
            "description": "Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the integrity of the 3D secure payment data",
            "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
          },
          "xid": {
            "type": "string",
            "description": "Unique identifier for the transaction assigned by the MPI",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          },
          "version": {
            "type": "string",
            "description": "Indicates the version of 3D Secure that was used for authentication",
            "example": "2.1.0"
          }
        }
      },
      "3dsEnrollmentData": {
        "type": "object",
        "properties": {
          "downgraded": {
            "type": "boolean",
            "description": "Indicates whether this was a 3D Secure payment downgraded to non-3D-Secure (when `attempt_n3d` is specified)",
            "example": false
          },
          "enrolled": {
            "type": "string",
            "description": "Indicates the 3D Secure enrollment status of the issuer\n  * `Y` - Issuer enrolled\n  * `N` - Customer not enrolled\n  * `U` - Unknown\n",
            "example": "Y"
          }
        }
      },
      "3dsRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether to process this payment as a 3D Secure payment",
            "default": false,
            "example": true
          },
          "attempt_n3d": {
            "type": "boolean",
            "description": "Determines whether to attempt a 3D Secure payment as non-3D Secure\nshould the card issuer not be enrolled\n",
            "default": false,
            "example": true
          },
          "eci": {
            "type": "string",
            "description": "The Electronic Commerce Indicator security level associated with the 3D Secure enrollment result. Required if using a third-party merchant plug-in (MPI)",
            "example": "05"
          },
          "cryptogram": {
            "type": "string",
            "description": "A Base64 encoded cryptographic identifier (CAVV) used by the card schemes to validate the cardholder authentication result (3D Secure). Required if using an external MPI",
            "example": "AgAAAAAAAIR8CQrXcIhbQAAAAAA="
          },
          "xid": {
            "type": "string",
            "description": "The 3D Secure transaction identifier. Required if using an external MPI with 3D Secure 2.X.X and a Mastercard card, or with 3D Secure 1.X.X for any supported card scheme",
            "example": "MDAwMDAwMDAwMDAwMDAwMzIyNzY="
          },
          "version": {
            "type": "string",
            "description": "Indicates the version of 3D Secure that was used for authentication. Defaults to 1.0.0 if not provided",
            "example": "2.0.1"
          }
        },
        "description": "Information required for 3D Secure payments"
      },
      "ActionId": {
        "maxLength": 30,
        "minLength": 30,
        "pattern": "^(act)_(\\w{26})$",
        "type": "string",
        "description": "The action identifier",
        "example": "act_y3oqhf46pyzuxjbcn2giaqnb44"
      },
      "BillingDescriptor": {
        "required": [
          "name",
          "city"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 25,
            "type": "string",
            "description": "A dynamic description of the charge",
            "example": "SUPERHEROES.COM"
          },
          "city": {
            "minimum": 1,
            "maxLength": 13,
            "type": "string",
            "description": "The city from which the charge originated",
            "example": "GOTHAM"
          }
        },
        "description": "An optional dynamic billing descriptor displayed on the account owner's statement\n"
      },
      "CaptureAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the capture action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the capture request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be captured. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "For some alternative payments, the URI that the customer should be redirected to to complete the capture",
                "example": {
                  "href": "https://api.checkout.com/redirect/act_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the capture",
            "readOnly": true
          }
        },
        "description": "Capture response"
      },
      "CaptureRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to capture. If not specified, the full payment amount will be captured\n",
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this capture request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the capture request. This can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "description": "The stock-keeping unit (SKU) identifier of the item",
            "example": "858818ac"
          },
          "name": {
            "type": "string",
            "description": "The name of the item or product",
            "example": "Kevlar batterang"
          },
          "description": {
            "type": "string",
            "description": "A description of the item or product",
            "example": "The fastest, hardest batterang known to man"
          },
          "image_url": {
            "type": "string",
            "description": "The URL of an image of the item or product",
            "format": "uri",
            "example": "http://example.com/batterang.jpg"
          },
          "price": {
            "type": "number",
            "description": "The unit price of the item or product in the minor currency unit",
            "example": 34.5
          },
          "quantity": {
            "type": "number",
            "description": "The number of the items purchased",
            "example": 2
          },
          "shipping_cost": {
            "type": "number",
            "description": "The shipping cost of the item",
            "example": 2.99
          },
          "shipping_tracking_url": {
            "type": "string",
            "description": "A URL to track the shipping status of the item",
            "format": "uri",
            "example": "http://www.dhl.co.uk/en/express/tracking.html?AWB=41f280bbe12cd787b47c&brand=DHL"
          }
        },
        "description": "The order line item or product that is being purchased"
      },
      "Payment": {
        "required": [
          "id",
          "requested_on",
          "amount",
          "currency",
          "status",
          "approved",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "Payment unique identifier"
          },
          "requested_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was requested"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "destination": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseDestination"
              }
            ],
            "description": "The destination of the payment"
          },
          "amount": {
            "type": "integer",
            "description": "The original payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the payment was successful",
            "example": true
          },
          "status": {
            "enum": [
              "Pending",
              "Authorized",
              "Card Verified",
              "Voided",
              "Partially Captured",
              "Captured",
              "Partially Refunded",
              "Refunded",
              "Declined",
              "Cancelled",
              "Paid"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsData"
              }
            ],
            "description": "Provides information relating to the processing of 3D Secure payments"
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payments risk assessment results"
          },
          "customer": {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The unique identifier of the customer. This can be passed as a source when making a payment",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer's email address",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Jack Napier"
              }
            },
            "description": "The customer to which this payment is linked"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The payment shipping details"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to a payment. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. \nApplicable for 3D Secure, digital wallets, and network token payments\n",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier\n",
            "example": "488341541494658"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentActionSummary"
            },
            "description": "A summary of the payment's actions, \nreturned when a session ID is used to get the payment details\n"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "refund": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/refund"
              }
            }
          }
        },
        "description": "Payment response"
      },
      "PaymentAcceptedResponse": {
        "required": [
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The payment's unique identifier",
            "readOnly": true
          },
          "status": {
            "enum": [
              "Pending"
            ],
            "type": "string",
            "description": "The status of the payment"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment request",
            "example": "ORD-5023-4E89"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ],
            "description": "The customer associated with the payment, if provided in the request"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3D Secure enrollment status"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4"
                }
              },
              "redirect": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI that the customer should be redirected to in order to complete the payment",
                "example": {
                  "href": "https://api.checkout.com/3ds/pay_mbabizu24mvu3mela5njyhpit4"
                }
              }
            },
            "description": "The links related to the payment",
            "readOnly": true
          }
        },
        "description": "Payment response"
      },
      "PaymentAction": {
        "required": [
          "id",
          "type",
          "amount",
          "response_code",
          "processed_on"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier of the payment action"
          },
          "type": {
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund",
              "Payout"
            ],
            "type": "string",
            "description": "The type of action"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the action was processed"
          },
          "amount": {
            "type": "integer",
            "description": "The action amount",
            "example": 6540
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the action was successful",
            "example": true
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code for cards",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the action",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_reference_number": {
                "type": "string",
                "description": "A unique identifier for the capture that is submitted to the card scheme during processing",
                "example": "24021219099007452440793"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              }
            },
            "description": "Returns information related to the processing of the payment"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to an action"
          }
        }
      },
      "PaymentActionsResponse": {
        "minItems": 1,
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PaymentAction"
        },
        "description": "The payment actions\n",
        "example": [
          {
            "id": "act_fd3h6evhpn3uxdoqbuu3lqnqbm",
            "type": "Refund",
            "processed_on": "2018-01-20T10:30:48.0000000+00:00",
            "amount": 1000,
            "approved": true,
            "response_code": 10000,
            "response_summary": "Approved"
          },
          {
            "id": "act_gefycn3jcvuupboxfmqrhk2aym",
            "type": "Capture",
            "processed_on": "2018-01-17T10:30:48.0000000+00:00",
            "amount": 6540,
            "approved": true,
            "response_code": 10000,
            "response_summary": "Approved",
            "processing": {
              "acquirer_reference_number": 2.402121909900745E+22,
              "acquirer_transaction_id": 745244079
            },
            "metadata": {
              "shipping_ref": "MQIBN2"
            }
          },
          {
            "id": "act_y3oqhf46pyzuxjbcn2giaqnb44",
            "type": "Authorization",
            "processed_on": "2018-01-17T09:30:48.0000000+00:00",
            "amount": 6540,
            "approved": true,
            "auth_code": 643381,
            "response_code": 10000,
            "response_summary": "Approved",
            "reference": "ORD-5023-4E89",
            "processing": {
              "retrieval_reference_number": 909913440644,
              "acquirer_transaction_id": 4.406443090994999E+20
            }
          }
        ]
      },
      "PaymentActionSummary": {
        "required": [
          "id",
          "type",
          "response_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier of the payment action"
          },
          "type": {
            "enum": [
              "Authorization",
              "Card Verification",
              "Void",
              "Capture",
              "Refund"
            ],
            "type": "string",
            "description": "The type of action"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          }
        }
      },
      "PaymentDestination": {
        "required": [
          "id",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The OpenPay account identifier",
            "example": "vendor-123456"
          },
          "amount": {
            "type": "integer",
            "description": "The amount to be credited to the destination in the major currency unit",
            "example": "10.50"
          }
        },
        "description": "A destination for OpenPay payments \n"
      },
      "PaymentId": {
        "maxLength": 30,
        "minLength": 30,
        "pattern": "^(pay)_(\\w{26})$",
        "type": "string",
        "description": "The payment identifier",
        "example": "pay_mbabizu24mvu3mela5njyhpit4"
      },
      "PaymentRecipient": {
        "type": "object",
        "properties": {
          "dob": {
            "type": "string",
            "description": "The recipient's date of birth (yyyy-mm-dd)",
            "format": "date",
            "example": "1985-05-15T00:00:00.0000000"
          },
          "account_number": {
            "maxLength": 10,
            "minLength": 10,
            "type": "string",
            "description": "The first six digits and the last four digits of the primary recipient's card, without spaces, or up to ten digits of the primary recipient's account number",
            "example": "5555554444"
          },
          "zip": {
            "type": "string",
            "description": "The first part of the UK postcode (e.g., W1T 4TJ would be W1T)",
            "example": "W1T"
          },
          "first_name": {
            "type": "string",
            "description": "The recipient's first name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "The recipient's last name",
            "example": "Jones"
          }
        },
        "description": "Information about the recipent of the payment's funds. Relevant for both [Account Funding Transactions](https://docs.checkout.com/payment-actions/account-funding-transactions) and VISA or MasterCard [domestic UK transactions processed by Financial Institutions](https://docs.ckotech.co/risk-management/requirements-for-financial-institutions)."
      },
      "PaymentRequest": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/resources/calculating-the-value\" target=\"blank\">depends on the currency</a>.\nOmit the amount or provide a value of `0` to perform a card verification. \n",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true\n"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` nor `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "The customer's details"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The shipping details"
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>, such as recurring payments –\nan existing payment identifier from the recurring series or the Scheme Transaction Id\n",
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment. Required for some risk checks"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "properties": {
              "aft": {
                "type": "boolean",
                "description": "Indicates whether the payment is an [Account Funding Transaction](https://docs.checkout.com/payment-actions/account-funding-transactions)"
              },
              "dlocal": {
                "type": "object",
                "properties": {
                  "country": {
                    "type": "string",
                    "description": "The two-letter ISO code of the cardholder's country.",
                    "example": "MX"
                  },
                  "payer": {
                    "type": "object",
                    "properties": {
                      "document": {
                        "type": "string",
                        "description": "The cardholder's personal identification number. The identification required is country-specific. See the <a href=\"https://docs.dlocal.com/api-documentation/payins-api-reference/country-reference#documents\" target=\"_blank\">dLocal documentation</a> for more information.",
                        "example": "DocumentId"
                      },
                      "name": {
                        "type": "string",
                        "description": "The cardholder's full name.",
                        "example": "John Doe"
                      },
                      "email": {
                        "type": "string",
                        "description": "The cardholder's email address.",
                        "example": "john.doe@example.com"
                      }
                    },
                    "description": "Details about the cardholder."
                  },
                  "installments": {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "string",
                        "description": "The number of payments to be made in the installment plan.",
                        "example": "3"
                      }
                    },
                    "description": "Details about the installments."
                  }
                },
                "description": "Processing information required for <a href=\"https://docs.checkout.com/payment-methods/cards/dlocal\" target=\"_blank\">dLocal payments</a>."
              }
            },
            "description": "Use the processing object to influence or override the data sent during card processing"
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "PaymentRequestDestination": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payout destination type",
            "example": "token"
          }
        },
        "description": "The destination of the payout.<br><i>Use to pay out to a card</i>.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenDestination",
            "id": "#/components/schemas/02_PaymentRequestIdDestination",
            "card": "#/components/schemas/03_PaymentRequestCardDestination"
          }
        }
      },
      "PaymentRequestSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type <br> *Note:* *To make a payment with full card details, you must be <a href=\"https://docs.checkout.com/risk-management/pci-compliance\" target=\"blank\">SAQ D PCI compliant</a>*",
            "example": "card"
          }
        },
        "description": "The source of the payment.<br><i>Use to request a payment</i>.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "token": "#/components/schemas/01_PaymentRequestTokenSource",
            "id": "#/components/schemas/02_PaymentRequestIdSource",
            "card": "#/components/schemas/03_PaymentRequestCardSource",
            "customer": "#/components/schemas/04_PaymentRequestCustomerSource",
            "network_token": "#/components/schemas/05_PaymentRequestNetworkTokenSource",
            "alipay": "#/components/schemas/PaymentRequestAlipaySource",
            "benefitpay": "#/components/schemas/PaymentRequestBenefitPaySource",
            "baloto": "#/components/schemas/PaymentRequestBalotoSource",
            "boleto": "#/components/schemas/PaymentRequestBoletoSource",
            "eps": "#/components/schemas/PaymentRequestEpsSource",
            "giropay": "#/components/schemas/PaymentRequestGiropaySource",
            "ideal": "#/components/schemas/PaymentRequestIdealSource",
            "klarna": "#/components/schemas/PaymentRequestKlarnaSource",
            "knet": "#/components/schemas/PaymentRequestKnetSource",
            "oxxo": "#/components/schemas/PaymentRequestOXXOSource",
            "p24": "#/components/schemas/PaymentRequestP24Source",
            "pagofacil": "#/components/schemas/PaymentRequestPagoFacilSource",
            "paypal": "#/components/schemas/PaymentRequestPayPalSource",
            "poli": "#/components/schemas/PaymentRequestPoliSource",
            "rapipago": "#/components/schemas/PaymentRequestRapiPagoSource",
            "sofort": "#/components/schemas/PaymentRequestSofortSource",
            "bancontact": "#/components/schemas/PaymentRequestBancontactSource",
            "fawry": "#/components/schemas/PaymentRequestFawrySource",
            "qpay": "#/components/schemas/PaymentRequestQPaySource",
            "multibanco": "#/components/schemas/PaymentRequestMultibancoSource"
          }
        }
      },
      "PaymentResponse": {
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "approved",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The payment's unique identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the action performed against this payment"
          },
          "amount": {
            "type": "integer",
            "description": "The payment amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a> of the payment",
            "example": "USD"
          },
          "approved": {
            "type": "boolean",
            "description": "Whether or not the authorization or capture was successful",
            "example": true
          },
          "status": {
            "enum": [
              "Authorized",
              "Pending",
              "Card Verified",
              "Captured",
              "Declined",
              "Paid"
            ],
            "type": "string",
            "description": "The status of the payment",
            "example": "Authorized"
          },
          "auth_code": {
            "type": "string",
            "description": "The acquirer authorization code if the payment was authorized",
            "example": "643381"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "3ds": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/3dsEnrollmentData"
              }
            ],
            "description": "Provides 3D Secure enrollment status if the payment was downgraded to non-3D Secure",
            "example": {
              "downgraded": true,
              "enrolled": "N"
            }
          },
          "risk": {
            "type": "object",
            "properties": {
              "flagged": {
                "type": "boolean",
                "description": "Whether or not the payment was flagged by a risk check",
                "default": false,
                "example": true
              }
            },
            "description": "Returns the payment's risk assessment results"
          },
          "source": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseSource"
              }
            ],
            "description": "The source of the payment"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseCustomer"
              }
            ],
            "description": "The customer associated with the payment, if provided in the request"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the payment was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the payment",
            "example": "ORD-5023-4E89"
          },
          "processing": {
            "type": "object",
            "properties": {
              "retrieval_reference_number": {
                "type": "string",
                "description": "A unique identifier for the authorization that is submitted to the card scheme during processing",
                "example": "909913440644"
              },
              "acquirer_transaction_id": {
                "type": "string",
                "description": "A unique identifier for the transaction generated by the acquirer",
                "example": "440644309099499894406"
              }
            },
            "description": "Returns information related to the processing of the payment"
          },
          "eci": {
            "type": "string",
            "description": "The final Electronic Commerce Indicator (ECI) security level used to authorize the payment. Applicable for 3D Secure, digital wallet, and network token payments",
            "example": "06"
          },
          "scheme_id": {
            "type": "string",
            "description": "The scheme transaction identifier",
            "example": "489341065491658"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "self",
              "actions"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment"
              },
              "actions": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to the payment's associated actions"
              },
              "void": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to void the payment, where applicable"
              },
              "capture": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to capture the payment, where applicable"
              },
              "refund": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "A link to refund the payment, where applicable"
              }
            },
            "description": "The links related to the payment",
            "example": {
              "self": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "actions": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/actions"
              },
              "void": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/voids"
              },
              "capture": {
                "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44/capture"
              }
            }
          }
        },
        "description": "Payment Response"
      },
      "PaymentResponseCustomer": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(cus)_(\\w{26})$",
            "type": "string",
            "description": "The customer's unique identifier. This can be passed as a source when making a payment",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jack Napier"
          }
        },
        "description": "The customer to which this payment is linked"
      },
      "PaymentResponseDestination": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment destination type.\n",
            "example": "card"
          },
          "id": {
            "type": "string",
            "description": "The payment source identifier that can be used for subsequent payments.\nFor new sources, this will only be returned if the payment was approved\n",
            "example": "src_wmlfc3zyhqzehihu7giusaaawu"
          },
          "billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The payment source owner's billing address"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The payment source owner's phone number"
          }
        },
        "description": "Payment destination",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardDestination"
          }
        }
      },
      "PaymentResponseSource": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type. For any payment request sources that result in a card token (token, source ID, etc.),\nthis will be `card`; otherwise it will be the name of the alternative payment method\n",
            "example": "card"
          },
          "id": {
            "type": "string",
            "description": "The payment source identifier that can be used for subsequent payments.\nFor new sources, this will only be returned if the payment was approved\n",
            "example": "src_nwd3m4in3hkuddfpjsaevunhdy"
          },
          "billing_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The payment source owner's billing address"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The payment source owner's phone number"
          }
        },
        "description": "Payment source",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "card": "#/components/schemas/01_PaymentResponseCardSource",
            "alipay": "#/components/schemas/PaymentResponseAlipaySource",
            "benefitpay": "#/components/schemas/PaymentResponseBenefitPaySource",
            "baloto": "#/components/schemas/PaymentResponseBalotoSource",
            "boleto": "#/components/schemas/PaymentResponseBoletoSource",
            "eps": "#/components/schemas/PaymentResponseEpsSource",
            "giropay": "#/components/schemas/PaymentResponseGiropaySource",
            "ideal": "#/components/schemas/PaymentResponseIdealSource",
            "klarna": "#/components/schemas/PaymentResponseKlarnaSource",
            "knet": "#/components/schemas/PaymentResponseKnetSource",
            "oxxo": "#/components/schemas/PaymentResponseOXXOSource",
            "p24": "#/components/schemas/PaymentResponseP24Source",
            "pagofacil": "#/components/schemas/PaymentResponsePagoFacilSource",
            "paypal": "#/components/schemas/PaymentResponsePayPalSource",
            "poli": "#/components/schemas/PaymentResponsePoliSource",
            "rapipago": "#/components/schemas/PaymentResponseRapiPagoSource",
            "sofort": "#/components/schemas/PaymentResponseSofortSource",
            "bancontact": "#/components/schemas/PaymentResponseBancontactSource",
            "fawry": "#/components/schemas/PaymentResponseFawrySource",
            "qpay": "#/components/schemas/PaymentResponseQPaySource",
            "multibanco": "#/components/schemas/PaymentResponseMultibancoSource"
          }
        }
      },
      "Payout": {
        "required": [
          "currency"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The payment amount.\nThe exact format <a href=\"https://docs.checkout.com/resources/calculating-the-value\" target=\"blank\">depends on the currency</a>.\nOmit the amount or provide a value of `0` to perform a card verification.\n",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter <a href=\"https://docs.checkout.com/resources/codes/currency-codes\" target=\"blank\">ISO currency code</a>\n",
            "example": "USD"
          },
          "payment_type": {
            "enum": [
              "Regular",
              "Recurring",
              "MOTO"
            ],
            "type": "string",
            "description": "This must be specified for card payments where the cardholder is not present (i.e., recurring or mail order / telephone order)",
            "default": "Regular",
            "example": "Recurring"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this payment, such as an order number",
            "example": "ORD-5023-4E89"
          },
          "description": {
            "type": "string",
            "description": "A description of the payment",
            "example": "Set of 3 masks"
          },
          "capture": {
            "type": "boolean",
            "description": "Whether to capture the payment (if applicable)",
            "default": true,
            "example": true
          },
          "capture_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ],
            "description": "A timestamp (ISO 8601 code) that determines when the payment should be captured.\nProviding this field will automatically set `capture` to true\n"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` nor `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "The customer's details"
          },
          "billing_descriptor": {
            "$ref": "#/components/schemas/BillingDescriptor"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The shipping address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number associated with the shipping address"
              }
            },
            "description": "The shipping details"
          },
          "3ds": {
            "$ref": "#/components/schemas/3dsRequest"
          },
          "previous_payment_id": {
            "type": "string",
            "description": "For payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>, such as recurring payments –\nan existing payment identifier from the recurring series or the Scheme Transaction Id\n",
            "example": "pay_fun26akvvjjerahhctaq2uzhu4"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskRequest"
          },
          "success_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default success redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/success"
          },
          "failure_url": {
            "type": "string",
            "description": "For redirect payment methods, this overrides the default failure redirect URL configured on your account",
            "format": "uri",
            "example": "http://example.com/payments/fail"
          },
          "payment_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IPAddress"
              }
            ],
            "description": "The IP address used to make the payment. Required for some risk checks"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "processing": {
            "type": "object",
            "properties": {
              "senderInformation": {
                "type": "object",
                "description": "Allows you to send <a href=\"https://docs.checkout.com/payment-actions/pay-out-to-a-card/sender-data-for-payouts\" target=\"_blank\">additional data</a> required for Visa Direct Original Credit Transaction (OCT) and Mastercard Moneysend payments."
              }
            },
            "description": "Use the processing object to influence or override the data sent during card processing"
          },
          "metadata": {
            "type": "object",
            "description": "Allows you to store additional information about a transaction with custom fields and up to five user-defined fields (`udf1` to `udf5`), which can be used for reporting purposes. `udf1` is also used for some of our risk rules.",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "RefundAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the refund action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the refund request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment to be refunded. Use this to check the status of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the refund",
            "readOnly": true
          }
        },
        "description": "Refund response"
      },
      "RefundRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount to refund. If not specified, the full payment amount will be refunded\n",
            "example": 6540
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this refund request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the refund request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "01_PaymentRequestTokenDestination": {
        "required": [
          "token",
          "first_name",
          "last_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "pattern": "^(tok)_(\\w{26})$",
                "type": "string",
                "description": "The Checkout.com token (e.g., a card, wallet or token)",
                "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
              },
              "first_name": {
                "type": "string",
                "description": "The payout destination owner's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The payout destination owner's last name",
                "example": "Smith"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payout destination owner's billing address. This will override the billing address specified during tokenization"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payout destination owner's phone number. This will override the phone number specified during tokenization"
              }
            }
          }
        ],
        "description": "A token payment destination"
      },
      "02_PaymentRequestIdDestination": {
        "required": [
          "id",
          "first_name",
          "last_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The payment source identifier (e.g., a card source identifier)",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "first_name": {
                "type": "string",
                "description": "The payout destination owner's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The payout destination owner's last name",
                "example": "Smith"
              }
            }
          }
        ],
        "description": "An existing payment source"
      },
      "03_PaymentRequestCardDestination": {
        "required": [
          "type",
          "number",
          "expiry_month",
          "expiry_year",
          "first_name",
          "last_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestDestination"
          },
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025
              },
              "first_name": {
                "type": "string",
                "description": "The payout destination owner's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The payout destination owner's last name",
                "example": "Smith"
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payout destination owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payout destination owner's phone number"
              }
            }
          }
        ],
        "description": "A card payment destination"
      },
      "01_PaymentRequestTokenSource": {
        "required": [
          "token"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "token": {
                "pattern": "^(tok)_(\\w{26})$",
                "type": "string",
                "description": "The Checkout.com token (e.g., a card or digital wallet token)",
                "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The customer's billing address. This will override the billing address specified during tokenization"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The customer's phone number. This will override the phone number specified during tokenization"
              }
            }
          }
        ],
        "description": "A token payment source"
      },
      "02_PaymentRequestIdSource": {
        "required": [
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(src)_(\\w{26})$",
                "type": "string",
                "description": "The payment source identifer (e.g., a card source identifier)",
                "example": "src_wmlfc3zyhqzehihu7giusaaawu"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code (for card sources). 3 digits, except for Amex (4 digits)",
                "example": "956"
              }
            }
          }
        ],
        "description": "An existing payment source"
      },
      "03_PaymentRequestCardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "type",
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number (without separators)",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The name of the cardholder",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956"
              },
              "stored": {
                "type": "boolean",
                "description": "This must be set to `true` for payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>",
                "default": false,
                "example": true
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The billing address of the cardholder"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The phone number of the cardholder"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "04_PaymentRequestCustomerSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The customer's identifier. Required if `email` is not provided",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "The customer's email address. Required if `id` is not provided",
                "format": "email",
                "example": "jokershere@gmail.com"
              }
            }
          }
        ],
        "description": "A customer source"
      },
      "05_PaymentRequestNetworkTokenSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "type",
              "token",
              "expiry_month",
              "expiry_year",
              "token_type",
              "cryptogram",
              "eci"
            ],
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The network token PAN",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the token",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the token",
                "example": 2025
              },
              "token_type": {
                "enum": [
                  "vts",
                  "mdes",
                  "applepay",
                  "googlepay"
                ],
                "type": "string",
                "description": "The type of token"
              },
              "cryptogram": {
                "type": "string",
                "description": "The Base64 encoded cryptographic identifier (TAVV) used by card schemes to validate the token verification result. Optional if `previous_payment_id` is specified and `3ds.enabled` is false",
                "example": "hv8mUFzPzRZoCAAAAAEQBDMAAAA="
              },
              "eci": {
                "type": "string",
                "description": "The Electronic Commerce Indicator (ECI) security level associated with the token. Optional if `previous_payment_id` is specified and `3ds.enabled` is false\n",
                "example": "05"
              },
              "stored": {
                "type": "boolean",
                "description": "This must be set to `true` for payments that use <a href=\"https://docs.checkout.com/quickstart/use-an-existing-card/stored-card-details\" target=\"blank\">stored card details</a>",
                "default": false,
                "example": true
              },
              "name": {
                "type": "string",
                "description": "The customer's name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The customer's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The customer's phone number"
              }
            }
          }
        ],
        "description": "A network token payment source"
      },
      "PaymentRequestAlipaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "Alipay Source"
      },
      "PaymentRequestBalotoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "type": "object",
            "properties": {
              "integration_type": {
                "enum": [
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "CO"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Colombia, namely, Cédula de Ciudadanía (CC).",
                    "example": "6845256661"
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ],
        "description": "Baloto Source"
      },
      "PaymentRequestBancontactSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "payment_country",
              "account_holder_name"
            ],
            "type": "object",
            "properties": {
              "payment_country": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "BE"
                ],
                "type": "string",
                "description": "The 2-letter ISO country code of the country in which the payment instrument is issued/operated."
              },
              "account_holder_name": {
                "maxLength": 100,
                "minLength": 3,
                "type": "string",
                "description": "The account holder."
              },
              "billing_descriptor": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment billing descriptor."
              },
              "language": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "fr",
                  "nl",
                  "de",
                  "en"
                ],
                "type": "string",
                "description": "The 2-letter ISO language code that should be preferred when presenting payment pages to the consumer.",
                "default": "fr",
                "example": "nl"
              }
            }
          }
        ],
        "description": "Bancontact Source"
      },
      "PaymentRequestBenefitPaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "integration_type"
            ],
            "type": "object",
            "properties": {
              "integration_type": {
                "enum": [
                  "web",
                  "mobile"
                ],
                "type": "string",
                "description": "Payment method integration type (platform wise)  \n* web:  \n  Payment requested for a purchase via a web browser.  \n  In case of successful creation, the request will return a QR code string and a transaction  \n  reference number (of the newly created corresponding BenefitPay transaction).  \n  The QR code string should be used to generate a QR code, which then should be displayed  \n  to the user for scanning using the BenefitPay app.  \n* mobile:  \n  Payment requested for a purchase via an iOS / Android app.  \n  In case of successful creation, the request will return a transaction reference number.  \n  The reference number should be used to request a transaction creation via the Android SDK  \n  or the iOS SDK of BenefitPay."
              }
            }
          }
        ],
        "description": "BenefitPay Source"
      },
      "PaymentRequestBoletoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "type": "object",
            "properties": {
              "integration_type": {
                "enum": [
                  "direct",
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "BR"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Brazil, namely, Cadastro de Pessoas Físicas (CPF) or Cadastro Nacional da Pessoa Jurídica (CNPJ)."
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ],
        "description": "Boleto Source"
      },
      "PaymentRequestEpsSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "purpose"
            ],
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits)"
              }
            }
          }
        ],
        "description": "Eps Source"
      },
      "PaymentRequestFawrySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "description",
              "products",
              "customer_email",
              "customer_mobile"
            ],
            "type": "object",
            "properties": {
              "description": {
                "maxLength": 265,
                "type": "string",
                "description": "The payment description."
              },
              "customer_profile_id": {
                "type": "string",
                "description": "The customer's id within merchant's system."
              },
              "customer_email": {
                "type": "string",
                "description": "The customer's email address."
              },
              "customer_mobile": {
                "type": "string",
                "description": "The customer's mobile phone number."
              },
              "expires_on": {
                "type": "string",
                "description": "The date on which the payment expires.",
                "format": "ISO 8601 date and time"
              },
              "products": {
                "type": "array",
                "items": {
                  "required": [
                    "product_id",
                    "quantity",
                    "price",
                    "description"
                  ],
                  "type": "object",
                  "properties": {
                    "product_id": {
                      "maxLength": 265,
                      "type": "string",
                      "description": "The id of the product."
                    },
                    "quantity": {
                      "type": "integer",
                      "description": "The quantity of the product."
                    },
                    "price": {
                      "type": "integer",
                      "description": "The price of the item.  Expressed using Checkout.com's standard rules for calculating payment values."
                    },
                    "description": {
                      "maxLength": 265,
                      "type": "string",
                      "description": "The description of the product."
                    }
                  }
                },
                "description": "List of Products"
              }
            }
          }
        ],
        "description": "Fawry Source"
      },
      "PaymentRequestGiropaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "purpose"
            ],
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits)"
              },
              "info_fields": {
                "maxItems": 5,
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "maxLength": 30,
                      "type": "string",
                      "description": "Additional information field which is shown on the payment form (label)"
                    },
                    "text": {
                      "maxLength": 80,
                      "type": "string",
                      "description": "Additional information field which is shown on the payment form (text)"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "description": "Giropay Source"
      },
      "PaymentRequestIdealSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "description",
              "bic"
            ],
            "type": "object",
            "properties": {
              "description": {
                "maxLength": 35,
                "type": "string",
                "description": "Description of the product(s) or services being paid for.  This field must not contain characters that can lead to problems (for example those occurring in HTML editing codes).  To prevent any possible errors most iDEAL systems will reject any description that contains HTML-tags and such other code.\n"
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits). In iDEAL-lingo this is also called issuerID"
              },
              "language": {
                "maxLength": 2,
                "type": "string",
                "description": "This field enables the Issuer's site to select the Consumer's preferred language  (e.g. the language selected on the Merchant's site), if the Issuer's site supports this.  Code list in accordance with ISO 639-1. (Dutch = 'nl', English = 'en').  If a non-supported or non-existing language is entered the standard language of the Issuer is used. It is recommended to use 'nl' by default since not all Issuers support other languages.\n"
              }
            }
          }
        ],
        "description": "Ideal Source"
      },
      "PaymentRequestKlarnaSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "authorization_token",
              "locale",
              "purchase_country",
              "billing_address",
              "tax_amount",
              "products"
            ],
            "type": "object",
            "properties": {
              "authorization_token": {
                "type": "string",
                "description": "Klarna authentication token, obtained by the merchant during client transaction authorization."
              },
              "locale": {
                "type": "string",
                "description": "RFC 1766 customer's locale. Optional, default taken from business settings.",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__locale"
              },
              "purchase_country": {
                "type": "string",
                "description": "ISO 3166 alpha-2 purchase country. Optional, default taken from business settings.",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__purchase_country"
              },
              "auto_capture": {
                "type": "boolean",
                "description": "Allow merchant to trigger auto capturing.",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__auto_capture"
              },
              "billing_address": {
                "type": "object",
                "description": "Customer's billing address.  \nThis object is passed directly to Klarna as `billing_address`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__billing_address).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__billing_address",
                "x-cko-passthrough": true
              },
              "shipping_address": {
                "type": "object",
                "description": "Customer's shipping address.  \nThis object is passed directly to Klarna as `shipping_address`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__shipping_address).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__shipping_address",
                "x-cko-passthrough": true
              },
              "tax_amount": {
                "type": "integer",
                "description": "Total tax amount of the order.",
                "x-klarna-name": "order_tax_amount",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__order_tax_amount"
              },
              "products": {
                "type": "array",
                "description": "The applicable order lines.  \nThis object is passed directly to Klarna as `order_lines`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__order_lines).",
                "x-klarna-name": "order_lines",
                "x-cko-passthrough": true,
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__order_lines"
              },
              "customer": {
                "type": "object",
                "description": "Information about the liable customer of the order.  \nThis object is passed directly to Klarna as `customer`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__customer).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__customer",
                "x-cko-passthrough": true
              },
              "merchant_reference1": {
                "type": "string",
                "description": "Used for storing merchant's internal order number or other reference.  If set, will be shown on the confirmation page as \"order number\" (max 255 characters).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__merchant_reference1"
              },
              "merchant_reference2": {
                "type": "string",
                "description": "Used for storing merchant's internal order number or other reference (max 255 characters).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__merchant_reference2"
              },
              "merchant_data": {
                "type": "string",
                "description": "Pass through field (max 1024 characters).",
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__merchant_data"
              },
              "attachment": {
                "type": "object",
                "description": "Additional purchase information required for some industries.  \nThis object is passed directly to Klarna as `attachment`, \nso for the object definition use the [Klarna documentation](https://developers.klarna.com/api/#payments-api__create-a-new-order__attachment).",
                "x-cko-passthrough": true,
                "x-klarna-docs": "https://developers.klarna.com/api/#payments-api__create-a-new-order__attachment"
              }
            }
          }
        ],
        "description": "Klarna Source"
      },
      "PaymentRequestKnetSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "language"
            ],
            "type": "object",
            "properties": {
              "language": {
                "maxLength": 2,
                "enum": [
                  "ar",
                  "en"
                ],
                "type": "string",
                "description": "This field enables the issuer's site to select the consumer's preferred language (e.g. the language selected on the merchant's site), if the issuer's site supports this. Code list in accordance with ISO 639-1. (Arabic = 'ar', English = 'en'). Note that 'ar' corresponds to 'ARA' and 'en' to 'USA' values accepted by KNet Gateway"
              },
              "user_defined_field1": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed"
              },
              "user_defined_field2": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed"
              },
              "user_defined_field3": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the `card_token` field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3"
              },
              "user_defined_field4": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field5": {
                "maxLength": 255,
                "type": "string",
                "description": "User-defined field that can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5"
              },
              "card_token": {
                "pattern": "^[0-9]{8}$",
                "type": "string",
                "description": "This token allows re-use of card details for multiple payments. This 8-digit token should be generated by a merchant. When a subsequent payment is initialized with the same card token, a customer is presented with two options. The customer can choose to pay with KFast (doesn't need to enter card details again), or with KNet as usual. The payment flow stays the same i.e. a merchant should redirect a customer to the redirect URL which is provided in the payment creation response. Note that `user_defined_field3` must be omitted when the `card_token` field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3"
              },
              "ptlf": {
                "maxLength": 45,
                "type": "string",
                "description": "This is an ID for merchant PTLF functionality tracking. Only alphanumeric characters are allowed. Note that `user_defined_field5` must be omitted when the `ptlf` field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5"
              }
            }
          }
        ],
        "description": "KNet Source"
      },
      "PaymentRequestMultibancoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "payment_country",
              "account_holder_name"
            ],
            "type": "object",
            "properties": {
              "payment_country": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "PT"
                ],
                "type": "string",
                "description": "The 2-letter ISO country code of the country in which the payment instrument is issued/operated."
              },
              "account_holder_name": {
                "maxLength": 100,
                "minLength": 3,
                "type": "string",
                "description": "The account holder."
              },
              "billing_descriptor": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment billing descriptor."
              }
            }
          }
        ],
        "description": "Multibanco Source"
      },
      "PaymentRequestOXXOSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "type": "object",
            "properties": {
              "integration_type": {
                "enum": [
                  "direct",
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "MX"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Mexico, namely, Unique Population Registry Code (CURP)."
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ],
        "description": "OXXO Source"
      },
      "PaymentRequestP24Source": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "payment_country",
              "account_holder_name",
              "account_holder_email"
            ],
            "type": "object",
            "properties": {
              "payment_country": {
                "maxLength": 2,
                "minLength": 2,
                "enum": [
                  "PL"
                ],
                "type": "string",
                "description": "The 2-letter ISO country code of the country in which the payment instrument is issued/operated."
              },
              "account_holder_name": {
                "maxLength": 100,
                "minLength": 3,
                "type": "string",
                "description": "The account holder."
              },
              "account_holder_email": {
                "maxLength": 254,
                "type": "string",
                "description": "RFC compliant email address of the account holder."
              },
              "billing_descriptor": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment billing descriptor."
              }
            }
          }
        ],
        "description": "P24 Source"
      },
      "PaymentRequestPagoFacilSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "type": "object",
            "properties": {
              "integration_type": {
                "enum": [
                  "direct",
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "AR"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Argentina, namely, Documento Nacional de Identidad (DNI) or Clave Única de Identificación Tributaria (CUIT).",
                    "example": "27332162"
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ],
        "description": "PagoFacil Source"
      },
      "PaymentRequestPayPalSource": {
        "required": [
          "invoice_number"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "type": "object",
            "properties": {
              "invoice_number": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string",
                "description": "PayPal recommends using this field to associate transactions with your internal tracking IDs or invoice numbers;  populating the invoice ID field will help you pull transaction information at a later date using only your internal ID.\n"
              },
              "recipient_name": {
                "maxLength": 128,
                "type": "string",
                "description": "Person's name associated with the shipping address.\n"
              },
              "logo_url": {
                "type": "string",
                "description": "A URL to your logo. Use a graphics format, such as .gif, .jpg, or .png.  The logo appears at the top of the cart review area. Host the image on a secure (https) server. Character limit: 127 single-byte alphanumeric characters. Width: 190px Height: 60px\n",
                "format": "uri"
              },
              "stc": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "These details are used by Paypal to perform a pre-transaction risk management evaluation. The property names should be the same one as agreed between the merchant and PayPal.\n",
                "example": {
                  "ota_type": "airline",
                  "ota_start_city": "SKG"
                }
              }
            }
          }
        ]
      },
      "PaymentRequestPoliSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "POLi Source"
      },
      "PaymentRequestQPaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "description"
            ],
            "type": "object",
            "properties": {
              "quantity": {
                "minimum": 1,
                "type": "integer",
                "description": "A numeric value greater than zero represents the quantity of purchased Item. The value is used for display purposes only and does not affect the total amount of the payment. The minimum allowed value is 1."
              },
              "description": {
                "type": "string",
                "description": "Alphanumeric string containing a description of the payment order. Note: The maximum allowed length of this property is 255 characters after UTF-8 URL encoding."
              },
              "language": {
                "type": "string",
                "description": "Alphabetic value representing the language of the interface displayed to customer at merchant site, and used as language for the payment description parameter.  PG will use this value to display the interface supporting selected language to the customer during the payment process.  Supported values are: En, Ar. The default value is En."
              },
              "national_id": {
                "maxLength": 32,
                "type": "string",
                "description": "Alphanumeric value representing the national id of the customer performing the transaction. The maximum allowed length of this property is 32."
              }
            }
          }
        ],
        "description": "QPay Source"
      },
      "PaymentRequestRapiPagoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          },
          {
            "required": [
              "integration_type",
              "country",
              "payer"
            ],
            "type": "object",
            "properties": {
              "integration_type": {
                "enum": [
                  "redirect"
                ],
                "type": "string",
                "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment."
              },
              "country": {
                "maxLength": 2,
                "enum": [
                  "AR"
                ],
                "type": "string",
                "description": "Payer's country code. ISO 3166-1 alpha-2 code."
              },
              "description": {
                "maxLength": 200,
                "type": "string",
                "description": "Payment description"
              },
              "payer": {
                "required": [
                  "name",
                  "email",
                  "document"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's full name."
                  },
                  "email": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's email address."
                  },
                  "document": {
                    "maxLength": 100,
                    "type": "string",
                    "description": "Payer's document identifier in Argentina, namely, Documento Nacional de Identidad (DNI) or Clave Única de Identificación Tributaria (CUIT).",
                    "example": "27332162"
                  }
                },
                "description": "Payer object"
              }
            }
          }
        ],
        "description": "RapiPago Source"
      },
      "PaymentRequestSofortSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestSource"
          }
        ],
        "description": "Sofort Source"
      },
      "01_PaymentResponseCardDestination": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseDestination"
          },
          {
            "required": [
              "expiry_month",
              "expiry_year",
              "last4",
              "fingerprint",
              "bin"
            ],
            "type": "object",
            "properties": {
              "expiry_month": {
                "minimum": 1,
                "maxLength": 1,
                "minLength": 2,
                "type": "integer",
                "description": "The expiry month",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996"
              },
              "fingerprint": {
                "type": "string",
                "description": "Uniquely identifies this particular card number. You can use this to compare cards across customers",
                "example": "F639CAB2745BEE4140BF86DF6B6D6"
              },
              "bin": {
                "maxLength": 6,
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347"
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              }
            }
          }
        ],
        "description": "A card payment destination"
      },
      "01_PaymentResponseCardSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "required": [
              "expiry_month",
              "expiry_year",
              "last4",
              "fingerprint",
              "bin"
            ],
            "type": "object",
            "properties": {
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996"
              },
              "fingerprint": {
                "type": "string",
                "description": "Uniquely identifies this particular card number. You can use this to compare cards across customers.",
                "example": "F639CAB2745BEE4140BF86DF6B6D6"
              },
              "bin": {
                "maxLength": 6,
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347"
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              },
              "avs_check": {
                "type": "string",
                "description": "The Address Verification System check result",
                "example": "S"
              },
              "cvv_check": {
                "type": "string",
                "description": "The card verification value (CVV) check result",
                "example": "Y"
              },
              "payouts": {
                "type": "boolean",
                "description": "Whether the card supports payouts",
                "example": true
              },
              "fast_funds": {
                "type": "string",
                "description": "The fast funds eligibility of the card. [Read more](https://docs.checkout.com/payment-actions/pay-out-to-a-card)",
                "example": "d"
              },
              "payment_account_reference": {
                "type": "string",
                "description": "A unique reference to the underlying card for network tokens (e.g., Apple Pay, Google Pay)",
                "example": "EUNIX9AX7THOOJIEJ2AP6OOFAHGH4"
              }
            }
          }
        ],
        "description": "A card payment source"
      },
      "PaymentResponseAlipaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "An Alipay payment source"
      },
      "PaymentResponseBalotoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  }
                }
              },
              {
                "type": "object"
              }
            ]
          }
        ],
        "description": "Baloto Source"
      },
      "PaymentResponseBancontactSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "The IBAN of the Consumer Bank account used for payment (if applicable).\n"
              }
            }
          }
        ],
        "description": "Bancontact Source"
      },
      "PaymentResponseBenefitPaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "reference_number": {
                "type": "string",
                "description": "Unique transaction reference number from BenefitPay"
              },
              "qr_data": {
                "type": "string",
                "description": "String for generating the QR code to be scanned"
              },
              "failure_reason": {
                "type": "string",
                "description": "Reason for error with payment"
              },
              "error_code": {
                "type": "string",
                "description": "Error code returned from BenefitPay.  For further detail, the full code meaning has to be requested directly from BenefitPay,  as CKO does not have access to this.\n"
              },
              "error_description": {
                "type": "string",
                "description": "Error description returned from BenefitPay"
              }
            }
          }
        ],
        "description": "BenefitPay Source"
      },
      "PaymentResponseBoletoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "direct",
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  },
                  "ticket": {
                    "required": [
                      "type"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "numeric",
                          "barcode",
                          "custom"
                        ],
                        "type": "string",
                        "description": "Type of ticket"
                      },
                      "number": {
                        "type": "string",
                        "description": "Numeric code of the numeric or custom ticket"
                      },
                      "barcode": {
                        "type": "string",
                        "description": "Code to be included in the barcode of the barcode or custom ticket"
                      },
                      "format": {
                        "type": "string",
                        "description": "Format of the barcode of the BARCODE or CUSTOM ticket. For example, CODE_128, or ITF."
                      },
                      "id": {
                        "type": "string",
                        "description": "Reference code of the ticket"
                      },
                      "expiration_date": {
                        "type": "string",
                        "description": "The expiration date of the ticket",
                        "format": "date-time"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company that acts as the beneficiary of the payment"
                      },
                      "company_id": {
                        "type": "string",
                        "description": "Identifier of the company"
                      },
                      "provider_name": {
                        "type": "string",
                        "description": "Name of the company/bank that is creating the ticket"
                      },
                      "provider_logo_url": {
                        "type": "string",
                        "description": "URL of the logo of the company/bank that is creating the ticket",
                        "format": "url"
                      },
                      "ticket_url": {
                        "type": "string",
                        "description": "URL of the full version of the ticket",
                        "format": "url"
                      }
                    },
                    "description": "Ticket object. Returned only when the payment was submitted with integration_type as 'direct'."
                  }
                }
              }
            ]
          }
        ],
        "description": "Boleto Source"
      },
      "PaymentResponseEpsSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "Bank Identifier Code (BIC). It can be exactly 8 characters or 11 characters long."
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "International Bank Account Number (IBAN) without whitespaces."
              },
              "account_holder": {
                "type": "string",
                "description": "Account holder information."
              }
            }
          }
        ],
        "description": "Eps Source"
      },
      "PaymentResponseFawrySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "required": [
              "description"
            ],
            "type": "object",
            "properties": {
              "description": {
                "maxLength": 65534,
                "type": "string",
                "description": "Payment description"
              },
              "reference_number": {
                "type": "string",
                "description": "The customer pays using this number at Fawry's outlets"
              }
            }
          }
        ],
        "description": "Fawry Source"
      },
      "PaymentResponseGiropaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "purpose": {
                "maxLength": 27,
                "type": "string",
                "description": "Purpose of the payment as appearing on customer's bank statement."
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "Bank Identifier Code (BIC). It can be exactly 8 characters or 11 characters long."
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "International Bank Account Number (IBAN) without whitespaces."
              },
              "account_holder": {
                "type": "string",
                "description": "Account holder information."
              }
            }
          }
        ],
        "description": "Giropay Source"
      },
      "PaymentResponseIdealSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "maxLength": 27,
                "type": "string",
                "description": "description"
              },
              "bic": {
                "maxLength": 11,
                "type": "string",
                "description": "BIC (8 or 11-digits) BIC of the bank where the Consumer account is held.  If governing law prevents Issuers outside the Netherlands from disclosing this information, field may be omitted.\n"
              },
              "iban": {
                "maxLength": 34,
                "type": "string",
                "description": "The IBAN of the Consumer Bank account used for payment.  If governing law prevents Issuers outside the Netherlands  from disclosing this information, field may be omitted.\n"
              },
              "account_holder": {
                "type": "string",
                "description": "Name of the Consumer according to the name of the account used for payment.  In the exceptional case that the consumerName cannot be retrieved by the Issuer,  this is filled with 'N/A'.  If governing law prevents Issuers outside the Netherlands from disclosing this information, field may be omitted.\n"
              }
            }
          }
        ],
        "description": "Ideal Source"
      },
      "PaymentResponseKlarnaSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string",
                "description": "Klarna order identifier"
              }
            }
          }
        ],
        "description": "Klarna Source"
      },
      "PaymentResponseKnetSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "language": {
                "enum": [
                  "ar",
                  "en"
                ],
                "type": "string",
                "description": "This field enables the Issuer's site to select the Consumer's preferred language (e.g. the language selected on the Merchant's site), if the Issuer's site supports this. Code list in accordance with ISO 639-1. (Arabic = 'ar', English = 'en'). NOTE: 'ar' corresponds to 'ARA' and 'en' - to 'USA' values accepted by KNet Gateway."
              },
              "user_defined_field1": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field2": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field3": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the card_token field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3."
              },
              "user_defined_field4": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed."
              },
              "user_defined_field5": {
                "type": "string",
                "description": "User defined field can be used to pass and store any additional transaction data required to be archived with the transaction and available as a searching criteria. Only alphanumeric characters and spaces are allowed. Note that this field must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5."
              },
              "card_token": {
                "pattern": "^[0-9]{8}$",
                "type": "string",
                "description": "This token allows re-usage of card details for multiple payments. This 8-digit token should be generated by a merchant. When a subsequent payment is initialized with the same card token, a customer is presented with two options. The customer can choose to pay with KFast (doesn't need to enter card details again), or with KNet as usual. The payment flow stays the same i.e. a merchant should redirect a customer to the redirect URL which is provided in the payment creation response. Note that user_defined_field3 must be omitted when the card_token field is not empty. This restriction exists because a card token is passed to KNet Gateway as user defined field 3."
              },
              "ptlf": {
                "maxLength": 45,
                "type": "string",
                "description": "This is an ID for merchant PTLF functionality tracking. Only alphanumeric characters are allowed. Note that user_defined_field5 must be omitted when the ptlf field is not empty. This restriction exists because a PTLF value is passed to KNet Gateway as user defined field 5."
              },
              "knet_payment_id": {
                "type": "string",
                "description": "The payment identifier assigned by KNet Gateway."
              },
              "knet_result": {
                "type": "string",
                "description": "The state of the payment, returned by KNet Gateway after the customer is redirected from the payment page."
              },
              "inquiry_result": {
                "type": "string",
                "description": "The state of the payment, retunrned by KNet Gateway in the response from the payment inquiry. This field is populated in rare cases when the redirection from the payment page did not occur properly."
              },
              "bank_reference": {
                "type": "string",
                "description": "The result transaction reference, given by some banks/institutions.",
                "example": "123456789012"
              },
              "knet_transaction_id": {
                "type": "string",
                "description": "The transaction identifier assigned by KNet Gateway.",
                "example": "1234567890123456"
              },
              "auth_code": {
                "type": "string",
                "description": "The resulting authorization code from the issuing bank.",
                "example": "999554"
              },
              "auth_response_code": {
                "type": "string",
                "description": "The auth response code / reason code relating to the issuing bank authorization code.",
                "example": "5"
              },
              "post_date": {
                "type": "string",
                "description": "The transaction date in the authorization system format, with the value defined by the issuing bank, so may not match the actual transaction date. The format is `MMDD`.",
                "example": "1127"
              },
              "avr": {
                "type": "string",
                "description": "The Address Verification Response returned from the address verification service.",
                "example": "A"
              },
              "error": {
                "type": "string",
                "description": "The KNET error code for transaction processing.",
                "example": "IPAY0100044"
              },
              "error_text": {
                "type": "string",
                "description": "The KNET text detail for the error, including an error code.",
                "example": "IPAY0100044-Problem occured while loading payment page."
              }
            }
          }
        ],
        "description": "KNet Source"
      },
      "PaymentResponseMultibancoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "payment_reference": {
                "type": "string",
                "description": "Multibanco payment reference"
              },
              "service_supplier_id": {
                "type": "string",
                "description": "The identifier of a supplier charging for its service or product"
              }
            }
          }
        ],
        "description": "Multibanco Source"
      },
      "PaymentResponseOXXOSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "direct",
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  },
                  "ticket": {
                    "required": [
                      "type"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "numeric",
                          "barcode",
                          "custom"
                        ],
                        "type": "string",
                        "description": "Type of ticket"
                      },
                      "number": {
                        "type": "string",
                        "description": "Numeric code of the numeric or custom ticket"
                      },
                      "barcode": {
                        "type": "string",
                        "description": "Code to be included in the barcode of the barcode or custom ticket"
                      },
                      "format": {
                        "type": "string",
                        "description": "Format of the barcode of the BARCODE or CUSTOM ticket. For example, CODE_128, or ITF."
                      },
                      "id": {
                        "type": "string",
                        "description": "Reference code of the ticket"
                      },
                      "expiration_date": {
                        "type": "string",
                        "description": "The expiration date of the ticket",
                        "format": "date-time"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company that acts as the beneficiary of the payment"
                      },
                      "company_id": {
                        "type": "string",
                        "description": "Identifier of the company"
                      },
                      "provider_name": {
                        "type": "string",
                        "description": "Name of the company/bank that is creating the ticket"
                      },
                      "provider_logo_url": {
                        "type": "string",
                        "description": "URL of the logo of the company/bank that is creating the ticket",
                        "format": "url"
                      },
                      "ticket_url": {
                        "type": "string",
                        "description": "URL of the full version of the ticket",
                        "format": "url"
                      }
                    },
                    "description": "Ticket object. Returned only when the payment was submitted with integration_type as 'direct'."
                  }
                }
              }
            ]
          }
        ],
        "description": "OXXO Source"
      },
      "PaymentResponseP24Source": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "p24_descriptor": {
                "type": "string",
                "description": "P24 generated payment descriptor, which will contain requested billing descriptor or merchant's default descriptor  (subject to truncation)."
              }
            }
          }
        ],
        "description": "P24 Source"
      },
      "PaymentResponsePagoFacilSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "direct",
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration:\n  - `direct`: a ticket object is returned, which a merchant can use to render a ticket to a customer; no redirect url is returned\n  - `redirect`: a redirect url is returned, which the merchant redirects the customer to, to continue payment"
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "ticket": {
                    "required": [
                      "type"
                    ],
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "numeric",
                          "barcode",
                          "custom",
                          "reference_code"
                        ],
                        "type": "string",
                        "description": "Type of ticket"
                      },
                      "number": {
                        "type": "string",
                        "description": "Numeric code of the numeric or custom ticket"
                      },
                      "barcode": {
                        "type": "string",
                        "description": "Code to be included in the barcode of the barcode or custom ticket"
                      },
                      "format": {
                        "type": "string",
                        "description": "Format of the barcode of the BARCODE or CUSTOM ticket. For example, CODE_128, or ITF."
                      },
                      "id": {
                        "type": "string",
                        "description": "Reference code of the ticket"
                      },
                      "expiration_date": {
                        "type": "string",
                        "description": "The expiration date of the ticket",
                        "format": "date-time"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Name of the company that acts as the beneficiary of the payment"
                      },
                      "company_id": {
                        "type": "string",
                        "description": "Identifier of the company"
                      },
                      "provider_name": {
                        "type": "string",
                        "description": "Name of the company/bank that is creating the ticket"
                      },
                      "provider_logo_url": {
                        "type": "string",
                        "description": "URL of the logo of the company/bank that is creating the ticket",
                        "format": "url"
                      },
                      "ticket_url": {
                        "type": "string",
                        "description": "URL of the full version of the ticket",
                        "format": "url"
                      }
                    },
                    "description": "Ticket object. Returned only when the payment was submitted with integration_type as 'direct'."
                  }
                }
              }
            ]
          }
        ],
        "description": "PagoFacil Source"
      },
      "PaymentResponsePayPalSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "PayPal payment source"
      },
      "PaymentResponsePoliSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A POLi payment source"
      },
      "PaymentResponseQPaySource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "Alphanumeric string containing a description of the payment order."
              },
              "qpay_status": {
                "type": "string",
                "description": "The status code returned from the QPay gateway on payment, if available."
              },
              "status_message": {
                "type": "string",
                "description": "A message giving further detail on the payment status, for failure/cancelled/success status payments."
              },
              "confirmation_id": {
                "type": "string",
                "description": "An identifier from the QPay gateway for a successful payment."
              }
            }
          }
        ],
        "description": "QPay Source"
      },
      "PaymentResponseRapiPagoSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "dlocal_order_id": {
                    "type": "string",
                    "description": "An ID used for tracking payments in dLocal.  The dLocal 'Order ID' will contain this value.",
                    "example": "b777afcdfdb74e6ab005fff223fe4d0f"
                  },
                  "dlocal_payment_id": {
                    "type": "string",
                    "description": "An ID returned from dLocal for a created payment.  The dLocal 'Payment ID' will contain this value. This value will not be available in the case of rejected payments.",
                    "example": "D-30150-73979261-1667-4a6d-aaca-92a805cf837d"
                  },
                  "failure_reason": {
                    "type": "string",
                    "description": "Reason of payment failure",
                    "example": "Third party response: Rejected (Error code: 300)"
                  },
                  "failure_code": {
                    "enum": [
                      "third_party_invalid_credentials",
                      "third_party_access_denied",
                      "third_party_invalid_request",
                      "third_party_invalid_parameter",
                      "third_party_invalid_transaction_status",
                      "third_party_rejected",
                      "third_party_amount_exceeded",
                      "third_party_timeout",
                      "third_party_error"
                    ],
                    "type": "string",
                    "description": "Failure code",
                    "example": "third_party_rejected"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "integration_type": {
                    "enum": [
                      "redirect"
                    ],
                    "type": "string",
                    "description": "The type of the integration. A redirect url is returned, which the merchant redirects the customer to, to continue payment."
                  },
                  "description": {
                    "maxLength": 200,
                    "type": "string",
                    "description": "Payment description"
                  }
                }
              },
              {
                "type": "object"
              }
            ]
          }
        ],
        "description": "RapiPago Source"
      },
      "PaymentResponseSofortSource": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentResponseSource"
          }
        ],
        "description": "A Sofort payment source"
      },
      "RiskRequest": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether a risk assessment should be performed",
            "default": true,
            "example": false
          }
        },
        "description": "Configures the risk assessment performed during the processing of the payment"
      },
      "VoidAcceptedResponse": {
        "required": [
          "action_id"
        ],
        "type": "object",
        "properties": {
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the void action"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 2,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the void",
            "readOnly": true
          }
        },
        "description": "Void response"
      },
      "VoidRequest": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify this void request",
            "example": "ORD-5023-4E89"
          },
          "metadata": {
            "type": "object",
            "description": "A set of key-value pairs that you can attach to the void request. It can be useful for storing additional information in a structured format",
            "example": {
              "coupon_code": "NY2018",
              "partner_id": 123989
            }
          }
        }
      },
      "VoidResponse": {
        "required": [
          "id",
          "action_id",
          "amount",
          "currency",
          "status",
          "response_code",
          "processed_on",
          "_links"
        ],
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentId"
              }
            ],
            "description": "The unique payment identifier"
          },
          "action_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionId"
              }
            ],
            "description": "The unique identifier for the void action"
          },
          "amount": {
            "type": "integer",
            "description": "The void amount",
            "example": 6540
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The three-letter ISO currency code of the payment",
            "example": "USD"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "example": "Voided"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "response_summary": {
            "type": "string",
            "description": "The Gateway response summary",
            "example": "Approved"
          },
          "processed_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the void was processed"
          },
          "reference": {
            "type": "string",
            "description": "Your reference for the void request",
            "example": "ORD-5023-4E89"
          },
          "_links": {
            "minItems": 1,
            "required": [
              "payment"
            ],
            "type": "object",
            "properties": {
              "payment": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment",
                "example": {
                  "href": "https://api.checkout.com/payments/pay_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the payment"
          }
        },
        "description": "Payment response"
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "country_code": {
            "maxLength": 7,
            "minLength": 1,
            "type": "string",
            "description": "The international <a href=\"https://docs.checkout.com/resources/codes/country-codes\" target=\"blank\">country calling code</a>. Required for some risk checks",
            "example": "+1"
          },
          "number": {
            "maxLength": 25,
            "minLength": 6,
            "type": "string",
            "description": "The phone number",
            "example": "415 555 2671"
          }
        },
        "description": "A phone number"
      },
      "PaymentsReportResponse": {
        "required": [
          "count",
          "data"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of payments included in the report",
            "example": 1
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique payment identifier. This was previously called `transaction_id`",
                  "example": "pay_nezg6bx2k22utmk4xm5s2ughxi"
                },
                "processing_currency": {
                  "type": "string",
                  "description": "The currency of the payment when processed by the cardholder",
                  "example": "USD"
                },
                "payout_currency": {
                  "type": "string",
                  "description": "The currency of the payment when paid out to you",
                  "example": "GBP"
                },
                "requested_on": {
                  "type": "string",
                  "description": "The date on which the payment was initiated",
                  "format": "date-time",
                  "example": "2019-03-08T10:29:51.9220000+00:00"
                },
                "channel_name": {
                  "type": "string",
                  "description": "The name of the channel from which the payment was initiated",
                  "example": "www.example.com"
                },
                "reference": {
                  "type": "string",
                  "description": "An optional identifier used for tracking payments. This was previously called `track_id`",
                  "example": "ORD-5023-4E89"
                },
                "payment_method": {
                  "type": "string",
                  "description": "The payment method",
                  "example": "VISA"
                },
                "card_type": {
                  "type": "string",
                  "description": "The card type",
                  "example": "CREDIT"
                },
                "card_category": {
                  "type": "string",
                  "description": "The card category",
                  "example": "Consumer"
                },
                "issuer_country": {
                  "type": "string",
                  "description": "The country of the issuing bank",
                  "example": "US"
                },
                "merchant_country": {
                  "type": "string",
                  "description": "The country of the merchant bank",
                  "example": "SI"
                },
                "mid": {
                  "type": "string",
                  "description": "An optional, user-defined identifier for the business",
                  "example": "123456"
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of action administered to a payment",
                        "example": "Authorization"
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier associated with an action (referred to as a charge ID in the Hub)",
                        "example": "act_nezg6bx2k22utmk4xm5s2ughxi"
                      },
                      "processed_on": {
                        "type": "string",
                        "description": "The date on which the action occurred",
                        "format": "date-time",
                        "example": "2019-03-08T10:29:51.9220000+00:00"
                      },
                      "response_code": {
                        "type": "integer",
                        "description": "The response code of the action (payment request)",
                        "example": 10000
                      },
                      "response_description": {
                        "type": "string",
                        "description": "Further information about the response code",
                        "example": "Approved"
                      },
                      "breakdown": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Describes an amount or fee associated with an action. For example, a gateway fee, capture fee and capture amount would all be associated with the capture action",
                              "example": "Gateway Fee Tax ARE USD/GBP@0.7640412612"
                            },
                            "date": {
                              "type": "string",
                              "description": "Specifies an associated date with a specific amount (some external fees are returned after the associated action)",
                              "format": "date-time",
                              "example": "2019-03-08T10:29:51.9220000+00:00"
                            },
                            "processing_currency_amount": {
                              "type": "string",
                              "description": "The associated amount in the processing currency (if applicable). Numerical values up to 8 decimal places are provided in the response",
                              "example": "-0.003"
                            },
                            "payout_currency_amount": {
                              "type": "string",
                              "description": "The associated amount in the payout currency. Numerical values up to 8 decimal places are provided in the response",
                              "example": "-0.00229212"
                            }
                          }
                        },
                        "description": "The breakdown object"
                      }
                    }
                  },
                  "description": "The actions object"
                },
                "_links": {
                  "type": "object",
                  "properties": {
                    "payments": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The direct link to the payment",
                          "example": "http://api.checkout.com/reporting/statements/190110B107654/payments"
                        }
                      },
                      "description": "The payments object"
                    }
                  },
                  "description": "The link object"
                }
              }
            },
            "description": "The data object"
          },
          "_links": {
            "type": "object",
            "properties": {
              "next": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This link allows you to move to the next page of results in the response. Responses are paginated at the payout level",
                    "example": "http://api.checkout.com/reporting/payments?from=01%2F03%2F2019%2000%3A00%3A00&to=01%2F03%2F2019%2000%3A00%3A00&limit=1&after=11111111"
                  }
                },
                "description": "The next object"
              },
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This is a direct link to the response associated with the submitted request",
                    "example": "http://api.checkout.com/reporting/payments?from=01%2F03%2F2019%2000%3A00%3A00&to=01%2F03%2F2019%2000%3A00%3A00&limit=1"
                  }
                },
                "description": "The self object"
              }
            },
            "description": "The link object"
          }
        },
        "description": "Payments Report Response"
      },
      "StatementsReportResponse": {
        "required": [
          "count",
          "data",
          "id",
          "period_start",
          "period_end",
          "date",
          "payouts",
          "_links"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of statements included in the report",
            "example": 1
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the generated statement",
                "example": "190110B107654"
              },
              "period_start": {
                "type": "string",
                "description": "The start date of all transactions and amounts that are encompassed within the statement",
                "format": "date-time",
                "example": "2019-01-09T00:00:00.0000000+00:00"
              },
              "period_end": {
                "type": "string",
                "description": "The end date of all transactions and amounts that are encompassed within the statement",
                "format": "date-time",
                "example": "2019-01-09T23:59:59.0000000+00:00"
              },
              "date": {
                "type": "string",
                "description": "The date the statement was generated",
                "format": "date-time"
              },
              "payouts": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "The currency of the payout",
                    "example": "GBP"
                  },
                  "carried_forward_amount": {
                    "type": "string",
                    "description": "The amount carried forward before the statement period",
                    "example": "0"
                  },
                  "current_period_amount": {
                    "type": "string",
                    "description": "The total amount of transactions during the statement period",
                    "example": "15005.24"
                  },
                  "net_amount": {
                    "type": "string",
                    "description": "The total amount paid out to your bank account",
                    "example": "15005.24"
                  },
                  "date": {
                    "type": "string",
                    "description": "The date the payout was completed",
                    "format": "date-time",
                    "example": "2019-01-10T00:00:00.0000000+00:00"
                  },
                  "period_start": {
                    "type": "string",
                    "description": "The period start date",
                    "format": "date-time",
                    "example": "2019-01-09T00:00:00.0000000+00:00"
                  },
                  "period_end": {
                    "type": "string",
                    "description": "The period end date",
                    "format": "date-time",
                    "example": "2019-01-09T23:59:59.0000000+00:00"
                  },
                  "id": {
                    "type": "string",
                    "description": "Identifies the associated payment",
                    "example": "ABCDEFGH"
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the payout",
                    "example": "Remitted"
                  },
                  "payout _fee": {
                    "type": "string",
                    "description": "The total fee charged for the payout",
                    "example": "-5"
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "payments": {
                        "type": "object",
                        "properties": {
                          "href": {
                            "type": "string",
                            "description": "The direct link to the payout",
                            "example": "http://api.checkout.com/reporting/statements/190110B107654/payments?payout_id=ABCDEFGH"
                          }
                        },
                        "description": "The payments object"
                      }
                    },
                    "description": "The link object"
                  }
                },
                "description": "The summary is a breakdown of your statement, ordered by the payout currency and its associated payout ID"
              },
              "_links": {
                "type": "object",
                "properties": {
                  "payments": {
                    "type": "object",
                    "properties": {
                      "href": {
                        "type": "string",
                        "description": "The direct link to the payment",
                        "example": "http://api.checkout.com/reporting/statements/190110B107654/payments"
                      }
                    },
                    "description": "The payments object"
                  }
                },
                "description": "The link object"
              }
            },
            "description": "The data object",
            "example": "1"
          },
          "_links": {
            "type": "object",
            "properties": {
              "next": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This link allows you to move to the next page of results in the response. Responses are paginated at the payout level",
                    "example": "http://api.checkout.com/reporting/statements?from=01%2F01%2F2019%2000%3A00%3A00&to=01%2F11%2F2019%2000%3A00%3A00&limit=1&skip=1"
                  }
                },
                "description": "The next link object"
              },
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "description": "This is a direct link to the response associated with the submitted request",
                    "example": "http://api.checkout.com/reporting/statements?from=01%2F01%2F2019%2000%3A00%3A00&to=01%2F11%2F2019%2000%3A00%3A00&limit=1"
                  }
                },
                "description": "The self link object"
              }
            },
            "description": "The link object"
          }
        },
        "description": "Statements Report Response"
      },
      "ResourceId": {
        "maxLength": 50,
        "type": "string",
        "description": "The resource ID. Defaults to UUID v4",
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "ServerTimestamp": {
        "type": "string",
        "description": "Read-only UTC timestamp, automatically assigned by us",
        "format": "date-time",
        "readOnly": true
      },
      "01_SepaSource": {
        "required": [
          "billing_address",
          "source_data"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceRequest"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/01_SepaAddress"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "source_data": {
                "required": [
                  "first_name",
                  "last_name",
                  "account_iban",
                  "bic",
                  "billing_descriptor",
                  "mandate_type"
                ],
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string",
                    "description": "The account holder's first name",
                    "example": "Marcus"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "The account holder's last name",
                    "example": "Barrilius Maximus"
                  },
                  "account_iban": {
                    "type": "string",
                    "description": "The account IBAN",
                    "example": "DE25100100101234567893"
                  },
                  "bic": {
                    "type": "string",
                    "description": "The account BIC",
                    "example": "PBNKDEFFXXX"
                  },
                  "billing_descriptor": {
                    "type": "string",
                    "description": "The billing descriptor",
                    "example": "ExampleCompany.com"
                  },
                  "mandate_type": {
                    "enum": [
                      "single",
                      "recurring"
                    ],
                    "type": "string",
                    "description": "The type of mandate",
                    "example": "recurring"
                  }
                },
                "description": "Additional data required to create SEPA payment sources"
              }
            }
          }
        ],
        "description": "A SEPA payment source"
      },
      "01_SepaSourceResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AddSourceResponse"
          },
          {
            "type": "object",
            "properties": {
              "response_data": {
                "type": "object",
                "properties": {
                  "mandate_reference": {
                    "type": "string",
                    "description": "The Direct Debit mandate reference",
                    "example": "MANDXI9809809"
                  }
                },
                "description": "SEPA Direct Debit details"
              },
              "_links": {
                "minItems": 1,
                "type": "object",
                "properties": {
                  "self": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "The URI of the payment source"
                  },
                  "cancel": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Link"
                      }
                    ],
                    "description": "A link to cancel the SEPA Direct Debit mandate"
                  }
                },
                "description": "The links related to the SEPA payment source",
                "readOnly": true
              }
            }
          }
        ],
        "description": "The SEPA mandate details"
      },
      "02_AchSource": {
        "required": [
          "billing_address",
          "source_data"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SourceRequest"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "source_data": {
                "required": [
                  "account_type",
                  "account_number",
                  "routing_number",
                  "account_holder_name",
                  "billing_descriptor"
                ],
                "type": "object",
                "properties": {
                  "account_type": {
                    "enum": [
                      "Checking",
                      "Savings",
                      "Corporate",
                      "CorpSavings"
                    ],
                    "type": "string",
                    "description": "The type of Direct Debit account",
                    "example": "Checking"
                  },
                  "account_number": {
                    "maxLength": 17,
                    "minLength": 4,
                    "type": "integer",
                    "description": "The account number of the Direct Debit account",
                    "example": "4099999992"
                  },
                  "routing_number": {
                    "maxLength": 9,
                    "minLength": 8,
                    "type": "integer",
                    "description": "The routing number of the Direct Debit account",
                    "example": 211370545
                  },
                  "account_holder_name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "type": "string",
                    "description": "The account holder's full name",
                    "example": "John Doe"
                  },
                  "billing_descriptor": {
                    "maxLength": 15,
                    "minLength": 1,
                    "type": "string",
                    "description": "The billing descriptor",
                    "example": "ExampleCompany.com"
                  },
                  "company_name": {
                    "maxLength": 40,
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the company (required for corporate accounts)",
                    "example": "Checkout.com"
                  }
                },
                "description": "Additional data required to create ACH payment sources"
              }
            }
          }
        ],
        "description": "An ACH payment source"
      },
      "AddSourceResponse": {
        "required": [
          "type",
          "response_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be used later for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "response_code": {
            "type": "string",
            "description": "The Gateway response code",
            "example": "10000"
          },
          "customer": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/SourceResponseCustomer"
              }
            ],
            "description": "The customer associated with the payment source if provided in the request"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSourceResponse",
            "ach": "#/components/schemas/AddSourceResponse"
          }
        }
      },
      "Source": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the payment source that can be later used for payments",
            "example": "src_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "_links": {
            "minItems": 1,
            "required": [
              "self"
            ],
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
                }
              }
            },
            "description": "The links related to the payment source",
            "readOnly": true,
            "example": {
              "self": {
                "href": "https://api.checkout.com/sources/src_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "sepa:mandate": {
                "href": "https://api.checkout.com/sepa/mandates/src_y3oqhf46pyzuxjbcn2giaqnb44"
              }
            }
          }
        }
      },
      "SourceRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The payment source type",
            "example": "sepa"
          },
          "reference": {
            "type": "string",
            "description": "A reference you can later use to identify the source",
            "example": "X-080957-N34"
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ],
            "description": "The payment source owner's phone number"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "pattern": "^(cus)_(\\w{26})$",
                "type": "string",
                "description": "The identifier of an existing customer. If neither customer `id` or `email` is provided, then \na new customer will be registered\n",
                "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
              },
              "email": {
                "type": "string",
                "description": "An optional email address to associate with the customer",
                "format": "email",
                "example": "jokershere@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "The customer's name. This will only set the name for *new* customers",
                "example": "Jack Napier"
              }
            },
            "description": "Details of the customer to associate with the source"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sepa": "#/components/schemas/01_SepaSource",
            "ach": "#/components/schemas/02_AchSource"
          }
        }
      },
      "SourceResponseCustomer": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^(cus)_(\\w{26})$",
            "type": "string",
            "description": "The unique identifier of the customer",
            "example": "cus_y3oqhf46pyzuxjbcn2giaqnb44"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address",
            "example": "jokershere@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The customer's name",
            "example": "Jack Napier"
          }
        },
        "description": "The customer to which the payment source is linked"
      },
      "Timestamp": {
        "type": "string",
        "description": "ISO 8601 timestamp",
        "format": "date-time"
      },
      "01_ApplePayTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "properties": {
              "token_data": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "Version information about the payment token. The token uses `EC_v1` for ECC-encrypted data, and `RSA_v1` for RSA-encrypted data"
                  },
                  "data": {
                    "type": "string",
                    "description": "Encrypted payment data. Base64 encoded as a string"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm"
                  },
                  "header": {
                    "type": "object",
                    "description": "Additional version-dependent information used to decrypt and verify the payment"
                  }
                },
                "description": "The Apple Pay payment token",
                "example": {
                  "version": "EC_v1",
                  "data": "t7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzvebKp3P0TekUslSQ8nkuacUgLdks2IKyCm7U3OL/PEYLXE7w60VkQ8WE6FXs/cqHkwtSW9vkzZNDxSLDg9slgLYxAH2/iztdipPpyIYKl0Kb6Rn9rboF+lwgRxM1B3n84miApwF5Pxl8ZOOXGY6F+3DsDo7sMCUTaJK74DUJJcjIXrigtINWKW6RFa/4qmPEC/Y+syg04x7B99mbLQQzWFm7z6HfRmynPM9/GA0kbsqd/Kn5Mkqssfhn/m6LuNKsqEmbKi85FF6kip+F17LRawG48bF/lT8wj/QEuDY0G7t/ryOnGLtKteXmAf0oJnwkelIyfyj2KI8GChBuTJonGlXKr5klPE89/ycmkgDl+T6Ms7PhiNZpuGEE2QE=",
                  "signature": "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwEAAKCAMIID5jCCA4ugAwIBAgIIaGD2mdnMpw8wCgYIKoZIzj0EAwIwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE2MDYwMzE4MTY0MFoXDTIxMDYwMjE4MTY0MFowYjEoMCYGA1UEAwwfZWNjLXNtcC1icm9rZXItc2lnbl9VQzQtU0FOREJPWDEUMBIGA1UECwwLaU9TIFN5c3RlbXMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEgjD9q8Oc914gLFDZm0US5jfiqQHdbLPgsc1LUmeY+M9OvegaJajCHkwz3c6OKpbC9q+hkwNFxOh6RCbOlRsSlaOCAhEwggINMEUGCCsGAQUFBwEBBDkwNzA1BggrBgEFBQcwAYYpaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZWFpY2EzMDIwHQYDVR0OBBYEFAIkMAua7u1GMZekplopnkJxghxFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUI/JJxE+T5O8n5sT2KGw/orv9LkswggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDQGA1UdHwQtMCswKaAnoCWGI2h0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlYWljYTMuY3JsMA4GA1UdDwEB/wQEAwIHgDAPBgkqhkiG92NkBh0EAgUAMAoGCCqGSM49BAMCA0kAMEYCIQDaHGOui+X2T44R6GVpN7m2nEcr6T6sMjOhZ5NuSo1egwIhAL1a+/hp88DKJ0sv3eT3FxWcs71xmbLKD/QJ3mWagrJNMIIC7jCCAnWgAwIBAgIISW0vvzqY2pcwCgYIKoZIzj0EAwIwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0NjMwWhcNMjkwNTA2MjM0NjMwWjB6MS4wLAYDVQQDDCVBcHBsZSBBcHBsaWNhdGlvbiBJbnRlZ3JhdGlvbiBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATwFxGEGddkhdUaXiWBB3bogKLv3nuuTeCN/EuT4TNW1WZbNa4i0Jd2DSJOe7oI/XYXzojLdrtmcL7I6CmE/1RFo4H3MIH0MEYGCCsGAQUFBwEBBDowODA2BggrBgEFBQcwAYYqaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwNC1hcHBsZXJvb3RjYWczMB0GA1UdDgQWBBQj8knET5Pk7yfmxPYobD+iu/0uSzAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFLuw3qFYM4iapIqZ3r6966/ayySrMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxlcm9vdGNhZzMuY3JsMA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgIOBAIFADAKBggqhkjOPQQDAgNnADBkAjA6z3KDURaZsYb7NcNWymK/9Bft2Q91TaKOvvGcgV5Ct4n4mPebWZ+Y1UENj53pwv4CMDIt1UQhsKMFd2xd8zg7kGf9F3wsIW2WT8ZyaYISb1T4en0bmcubCYkhYQaZDwmSHQAAMYIBjTCCAYkCAQEwgYYwejEuMCwGA1UEAwwlQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTAghoYPaZ2cynDzANBglghkgBZQMEAgEFAKCBlTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNzA4MDIxNjA5NDZaMCoGCSqGSIb3DQEJNDEdMBswDQYJYIZIAWUDBAIBBQChCgYIKoZIzj0EAwIwLwYJKoZIhvcNAQkEMSIEIGEfVr+4x9RQXyfF8IYA0kraoK0pcZEaBlINo6EGrOReMAoGCCqGSM49BAMCBEgwRgIhAKunK47QEr/ZjxPlVl+etzVzbKA41xPLWtO01oUOlulmAiEAiaFH9F9LK6uqTFAUW/WIDkHWiFuSm5a3NVox7DlyIf0AAAAAAAA=",
                  "header": {
                    "ephemeralPublicKey": "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEX1ievoT8DRB8T5zGkhHZHeDr0oBmYEgsDSxyT0MD0IZ2Mpfjz2LdWq6LUwSH9EmxdPEzMunsZKWMyOr3K/zlsw==",
                    "publicKeyHash": "tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6Nl0=",
                    "transactionId": "3cee89679130a4b2617c76118a1c62fd400cd45b49dc0916d5b951b560cd17b4"
                  }
                }
              }
            }
          }
        ],
        "description": "Apple Pay Token Request"
      },
      "01_ApplePayTokenResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          }
        ],
        "description": "Apple Pay Token Response"
      },
      "02_GooglePayTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "type": "object",
            "properties": {
              "token_data": {
                "type": "object",
                "properties": {
                  "signature": {
                    "type": "string",
                    "description": "Verifies the message came from Google. The signature is created using ECDSA"
                  },
                  "protocolVersion": {
                    "type": "string",
                    "description": "Identifies which encryption/signing scheme created this message. In this way, the protocol can evolve over time if needed. If it is not set, assume ECv0"
                  },
                  "signedMessage": {
                    "type": "string",
                    "description": "A serialized JSON string containing the encryptedMessage, ephemeralPublicKey, and tag. To simplify the signature verification process, this value is serialized"
                  }
                },
                "description": "The Google Pay payment token",
                "example": {
                  "protocolVersion": "ECv1",
                  "signature": "TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
                  "signedMessage": "{\"encryptedMessage\": \"ZW5jcnlwdGVkTWVzc2FnZQ==\", \"ephemeralPublicKey\": \"ZXBoZW1lcmFsUHVibGljS2V5\", \"tag\": \"c2lnbmF0dXJl\"}"
                }
              }
            }
          }
        ],
        "description": "Google Pay Token Request"
      },
      "02_GooglePayTokenResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          }
        ],
        "description": "Google Pay Token Response"
      },
      "03_CardTokenRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenRequest"
          },
          {
            "required": [
              "number",
              "expiry_month",
              "expiry_year"
            ],
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "The card number",
                "example": "4543474002249996"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month of the card",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year of the card",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "cvv": {
                "maxLength": 4,
                "minLength": 3,
                "type": "string",
                "description": "The card verification value/code. 3 digits, except for Amex (4 digits)",
                "example": "956"
              },
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              }
            }
          }
        ],
        "description": "Card Token Request"
      },
      "03_CardTokenResponse": {
        "required": [
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenResponse"
          },
          {
            "type": "object",
            "properties": {
              "billing_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The payment source owner's billing address"
              },
              "phone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneNumber"
                  }
                ],
                "description": "The payment source owner's phone number"
              },
              "expiry_month": {
                "minimum": 1,
                "maxLength": 2,
                "minLength": 1,
                "type": "integer",
                "description": "The expiry month",
                "example": 6
              },
              "expiry_year": {
                "maxLength": 4,
                "minLength": 4,
                "type": "integer",
                "description": "The expiry year",
                "example": 2025
              },
              "name": {
                "type": "string",
                "description": "The cardholder's name",
                "example": "Bruce Wayne"
              },
              "scheme": {
                "type": "string",
                "description": "The card scheme",
                "example": "VISA"
              },
              "last4": {
                "maxLength": 4,
                "minLength": 4,
                "type": "string",
                "description": "The last four digits of the card number",
                "example": "9996"
              },
              "bin": {
                "maxLength": 6,
                "type": "string",
                "description": "The card issuer's Bank Identification Number (BIN)",
                "example": "454347"
              },
              "card_type": {
                "enum": [
                  "Credit",
                  "Debit",
                  "Prepaid",
                  "Charge"
                ],
                "type": "string",
                "description": "The card type",
                "example": "Credit"
              },
              "card_category": {
                "enum": [
                  "Consumer",
                  "Commercial"
                ],
                "type": "string",
                "description": "The card category",
                "example": "Consumer"
              },
              "issuer": {
                "type": "string",
                "description": "The name of the card issuer",
                "example": "GOTHAM STATE BANK"
              },
              "issuer_country": {
                "maxLength": 2,
                "minLength": 2,
                "type": "string",
                "description": "The card issuer's country (<a href=\"https://docs.checkout.com/docs/country-codes\" target=\"blank\">two-letter ISO code</a>)",
                "example": "US"
              },
              "product_id": {
                "type": "string",
                "description": "The issuer/card scheme product identifier",
                "example": "F"
              },
              "product_type": {
                "type": "string",
                "description": "The issuer/card scheme product type",
                "example": "CLASSIC"
              }
            }
          }
        ],
        "description": "Card Token Response"
      },
      "TokenRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "applepay": "#/components/schemas/01_ApplePayTokenRequest",
            "googlepay": "#/components/schemas/02_GooglePayTokenRequest",
            "card": "#/components/schemas/03_CardTokenRequest"
          }
        }
      },
      "TokenResponse": {
        "required": [
          "type",
          "token",
          "expires_on",
          "expiry_month",
          "expiry_year",
          "last4",
          "bin"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of card details to be tokenized",
            "example": "card"
          },
          "token": {
            "type": "string",
            "description": "The reference token",
            "example": "tok_ubfj2q76miwundwlk72vxt2i7q"
          },
          "expires_on": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerTimestamp"
              }
            ],
            "description": "The date/time the token will expire"
          },
          "expiry_month": {
            "minimum": 1,
            "maxLength": 2,
            "minLength": 1,
            "type": "integer",
            "description": "The expiry month",
            "example": 6
          },
          "expiry_year": {
            "maxLength": 4,
            "minLength": 4,
            "type": "integer",
            "description": "expiry year",
            "example": 2025
          },
          "scheme": {
            "type": "string",
            "description": "The card scheme",
            "example": "VISA"
          },
          "last4": {
            "type": "string",
            "description": "The last four digits of the card number",
            "example": "9996"
          },
          "bin": {
            "type": "string",
            "description": "The card issuer BIN",
            "example": "454347"
          },
          "card_type": {
            "enum": [
              "Credit",
              "Debit",
              "Prepaid",
              "Charge"
            ],
            "type": "string",
            "description": "The card type",
            "example": "Credit"
          },
          "card_category": {
            "enum": [
              "Consumer",
              "Commercial"
            ],
            "type": "string",
            "description": "The card category",
            "example": "Consumer"
          },
          "issuer": {
            "type": "string",
            "description": "The name of the card issuer",
            "example": "GOTHAM STATE BANK"
          },
          "issuer_country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The card issuer country ISO-2 code",
            "example": "US"
          },
          "product_id": {
            "type": "string",
            "description": "The issuer/card scheme product identifier",
            "example": "F"
          },
          "product_type": {
            "type": "string",
            "description": "The issuer/card scheme product type",
            "example": "CLASSIC"
          }
        },
        "description": "The source of the payment",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "applepay": "#/components/schemas/01_ApplePayTokenResponse",
            "googlepay": "#/components/schemas/02_GooglePayTokenResponse",
            "card": "#/components/schemas/03_CardTokenResponse"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "example": "0HL80RJLS76I7"
          },
          "error_type": {
            "type": "string",
            "example": "request_invalid"
          },
          "error_codes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "payment_source_required"
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "^(wh)_(\\w{32})$",
            "example": "wh_387ac7a83a054e37ae140105429d76b5"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/webhooks"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "headers": {
            "type": "object",
            "example": {
              "authorization": 1234
            }
          },
          "content_type": {
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "example": "json"
          },
          "event_types": {
            "$ref": "#/components/schemas/WebhookEvents"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Link"
                  }
                ],
                "description": "The URI of the payment source",
                "example": {
                  "href": "https://api.checkout.com/webhooks/wh_387ac7a83a054e37ae140105429d76b5"
                }
              }
            }
          }
        }
      },
      "WebhookEvents": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "payment_approved",
          "payment_flagged",
          "payment_pending",
          "payment_declined",
          "payment_expired",
          "payment_canceled",
          "payment_voided",
          "payment_void_declined",
          "payment_captured",
          "payment_capture_declined",
          "payment_capture_pending",
          "payment_refunded",
          "payment_refund_declined",
          "payment_refund_pending"
        ]
      },
      "WebhookRequest": {
        "required": [
          "url",
          "event_types"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Your webhook endpoint",
            "format": "url",
            "example": "https://example.com/webhooks"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the webhook is active",
            "default": true,
            "example": true
          },
          "headers": {
            "type": "object",
            "example": {
              "authorization": 1234
            }
          },
          "content_type": {
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "The content type to be sent to the webhook endpoint",
            "default": "json",
            "example": "json"
          },
          "event_types": {
            "$ref": "#/components/schemas/WebhookEvents"
          }
        }
      }
    },
    "responses": {
      "AccessForbidden": {
        "description": "Access forbidden, invalid API-KEY was used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidDataError": {
        "description": "Invalid data was sent",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters": {
      "collectionCriteria": {
        "name": "criteria",
        "in": "query",
        "description": "The json criteria for collection",
        "schema": {
          "type": "string"
        }
      },
      "collectionExpand": {
        "name": "expand",
        "in": "query",
        "description": "Expand response to get full related object intead of ID.  See the expand guide for more info.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFields": {
        "name": "fields",
        "in": "query",
        "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.",
        "schema": {
          "type": "string"
        }
      },
      "collectionFilter": {
        "name": "filter",
        "in": "query",
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n",
        "schema": {
          "type": "string"
        }
      },
      "collectionLimit": {
        "name": "limit",
        "in": "query",
        "description": "The collection items limit",
        "schema": {
          "maximum": 1000,
          "minimum": 0,
          "type": "integer"
        }
      },
      "collectionOffset": {
        "name": "offset",
        "in": "query",
        "description": "The collection items offset",
        "schema": {
          "minimum": 0,
          "type": "integer"
        }
      },
      "collectionQuery": {
        "name": "q",
        "in": "query",
        "description": "The partial search of the text fields.",
        "schema": {
          "type": "string"
        }
      },
      "collectionSort": {
        "name": "sort",
        "in": "query",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "hash": {
        "name": "hash",
        "in": "path",
        "description": "The token identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "mediaType": {
        "name": "Accept",
        "in": "header",
        "description": "The response media type",
        "schema": {
          "enum": [
            "application/json"
          ],
          "type": "string",
          "default": "application/json"
        }
      },
      "resourceId": {
        "name": "id",
        "in": "path",
        "description": "The resource identifier string",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "rulesVersion": {
        "name": "version",
        "in": "path",
        "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
        "required": true,
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "systemEventType": {
        "name": "eventType",
        "in": "path",
        "description": "The event type",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "Cko-Request-Id": {
        "description": "The unique identifier of the request",
        "schema": {
          "type": "string"
        }
      },
      "Cko-Version": {
        "description": "The version of the API",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "description": "Unless explicitly stated, all endpoints require authentication using your secret key.  Public keys should only be used in JavaScript or native applications. \nYou can find your API keys, and generate new ones, in your <a href=\"https://hub.checkout.com/login\" target=\"blank\">Hub account</a>.\n",
        "name": "Authorization",
        "in": "query"
      }
    }
  },
  "tags": [
    {
      "name": "Payments",
      "description": "Process and manage payments from a variety of sources and to various destinations all within one integration."
    },
    {
      "name": "Sources",
      "description": "Create a payment source for a customer that you can use for one or more payments."
    },
    {
      "name": "Tokens",
      "description": "Create a token that represents a card's details (or their tokenized form in a digital wallet) that you can later use to request a payment, without you having to process or store any sensitive information."
    },
    {
      "name": "Instruments",
      "description": "Create a payment instrument that you can later use as the source or destination for one or more payments."
    },
    {
      "name": "Webhooks",
      "description": "Create and manage the webhook notifications you receive to keep up to date with the status of your transactions."
    },
    {
      "name": "Events",
      "description": "Use events to monitor and get insights into your transactions."
    },
    {
      "name": "Disputes",
      "description": "Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response."
    }
  ]
}